<!-- `.md` and `.py` files are generated from the `.qmd` file. Please edit that file. -->

---
title: "Page-by Grouping for Clinical Data"
format: gfm
eval: false
---

!!! tip

    To run the code from this article as a Python script:

    ```bash
    python3 examples/example-pagination-grouping.py
    ```

This article demonstrates rtflite's page-by grouping functionality, which mirrors r2rtf's `page_by` and `new_page` parameters. This feature is essential for clinical reports where data needs to be separated by treatment groups, study sites, or adverse event categories.

## Overview

Page-by grouping allows you to:

- Create separate pages for different data groups (e.g., by treatment arm)
- Control whether page breaks occur between groups
- Generate group-specific headers and summaries
- Maintain proper formatting across grouped sections

This is particularly useful for:
- Adverse event summaries by system organ class
- Demographics tables by treatment group
- Lab results by visit or timepoint
- Site-specific enrollment summaries

## Imports

```{python}
import pandas as pd
import numpy as np
import rtflite as rtf
```

## Create Clinical Trial Data

Generate sample adverse event data to demonstrate grouping:

```{python}
# Create sample adverse events data
np.random.seed(123)

# Define adverse event categories
soc_categories = [
    'Gastrointestinal disorders',
    'Nervous system disorders', 
    'Skin and subcutaneous tissue disorders',
    'General disorders and administration site conditions',
    'Infections and infestations'
]

preferred_terms = {
    'Gastrointestinal disorders': ['Nausea', 'Vomiting', 'Diarrhea', 'Constipation', 'Abdominal pain'],
    'Nervous system disorders': ['Headache', 'Dizziness', 'Somnolence', 'Tremor'],
    'Skin and subcutaneous tissue disorders': ['Rash', 'Pruritus', 'Erythema', 'Dry skin'],
    'General disorders and administration site conditions': ['Fatigue', 'Pyrexia', 'Asthenia', 'Injection site reaction'],
    'Infections and infestations': ['Upper respiratory tract infection', 'Urinary tract infection', 'Nasopharyngitis']
}

treatments = ['Placebo', 'Drug 5mg', 'Drug 10mg']

# Generate AE data
ae_data = []
for soc in soc_categories:
    for pt in preferred_terms[soc]:
        for trt in treatments:
            # Generate counts with some randomness
            n_subjects = np.random.poisson(3) + 1  # 1-10 subjects typically
            n_events = n_subjects + np.random.poisson(2)  # Usually more events than subjects
            
            ae_data.append({
                'SOC': soc,
                'Preferred_Term': pt,
                'Treatment': trt,
                'N_Subjects': n_subjects,
                'N_Events': n_events,
                'Percentage': round((n_subjects / 100) * 100, 1)  # Assuming 100 subjects per arm
            })

df_ae = pd.DataFrame(ae_data)
print(f"Generated {len(df_ae)} adverse event records")
print("\nSample data:")
print(df_ae.head(10))
```

```
Generated 75 adverse event records

Sample data:
                                         SOC Preferred_Term  Treatment  N_Subjects  N_Events  Percentage
0                      Gastrointestinal disorders         Nausea    Placebo           3         3         3.0
1                      Gastrointestinal disorders         Nausea   Drug 5mg           2         4         2.0
2                      Gastrointestinal disorders         Nausea  Drug 10mg           2         2         2.0
3                      Gastrointestinal disorders       Vomiting    Placebo           3         7         3.0
4                      Gastrointestinal disorders       Vomiting   Drug 5mg           2         4         2.0
5                      Gastrointestinal disorders       Vomiting  Drug 10mg           4         6         4.0
6                      Gastrointestinal disorders       Diarrhea    Placebo           1         1         1.0
7                      Gastrointestinal disorders       Diarrhea   Drug 5mg           5         7         5.0
8                      Gastrointestinal disorders       Diarrhea  Drug 10mg           5         5         5.0
9                      Gastrointestinal disorders   Constipation    Placebo           2         4         2.0
```

## Basic Page-by Grouping

Create separate pages for each System Organ Class:

```{python}
# Create column headers for AE table
ae_headers1 = pd.DataFrame([['', 'Placebo', 'Drug 5mg', 'Drug 10mg']])
ae_headers2 = pd.DataFrame([['Preferred Term', 'n (%)', 'n (%)', 'n (%)']])

# Create RTF document with page-by grouping
doc_grouped = rtf.RTFDocument(
    df=df_ae,
    rtf_page=rtf.RTFPage(
        nrow=30,  # Allow more rows per page
        orientation="portrait"
    ),
    rtf_title=rtf.RTFTitle(
        text=["Treatment-Emergent Adverse Events", "By System Organ Class", "Safety Population"]
    ),
    rtf_column_header=[
        rtf.RTFColumnHeader(
            df=ae_headers1,
            col_rel_width=[3, 2, 2, 2],
            text_justification=["l", "c", "c", "c"],
            text_format=["b"] * 4,
            border_bottom=["single"] * 4
        ),
        rtf.RTFColumnHeader(
            df=ae_headers2,
            col_rel_width=[3, 2, 2, 2],
            text_justification=["l", "c", "c", "c"],
            text_format=["b"] * 4,
            border_top=["single"] * 4,
            border_bottom=["single"] * 4
        )
    ],
    rtf_body=rtf.RTFBody(
        page_by=["SOC"],  # Group by System Organ Class
        new_page=True,    # Force new page for each SOC
        pageby_header=True,  # Show SOC as page header
        col_rel_width=[3, 2, 2, 2],
        text_justification=["l", "c", "c", "c"],
        border_left=["single", "", "", ""],
        border_right=["", "", "", "single"]
    ),
    rtf_footnote=rtf.RTFFootnote(
        text="Treatment-emergent adverse events occurring in â‰¥2% of subjects in any treatment group. " +
             "Subjects counted once per preferred term per treatment."
    ),
    rtf_source=rtf.RTFSource(
        text="Source: ADAE dataset, Data cutoff: 15-JAN-2024"
    )
)

# Write grouped RTF file
doc_grouped.write_rtf("ae_by_soc_grouped.rtf")
print("Created ae_by_soc_grouped.rtf with page-by grouping")
```

```
Created ae_by_soc_grouped.rtf with page-by grouping
```

## Advanced Grouping with Treatment Summaries

Create a more complex example with nested grouping:

```{python}
# Create summary data by treatment and SOC
summary_data = []
for trt in treatments:
    trt_data = df_ae[df_ae['Treatment'] == trt]
    
    for soc in soc_categories:
        soc_data = trt_data[trt_data['SOC'] == soc]
        
        total_subjects = soc_data['N_Subjects'].sum()
        total_events = soc_data['N_Events'].sum()
        unique_pts = len(soc_data['Preferred_Term'].unique())
        
        summary_data.append({
            'Treatment_Group': trt,
            'SOC': soc,
            'Total_Subjects': total_subjects,
            'Total_Events': total_events,
            'Unique_PTs': unique_pts,
            'Avg_Events_Per_Subject': round(total_events / max(total_subjects, 1), 2)
        })

df_summary = pd.DataFrame(summary_data)

# Create advanced grouped document
doc_advanced = rtf.RTFDocument(
    df=df_summary,
    rtf_page=rtf.RTFPage(
        nrow=15,  # Smaller pages for better grouping demonstration
        orientation="landscape",
        page_title_location="first",  # Title only on first page
        page_footnote_location="last"  # Footnote only on last page
    ),
    rtf_page_header=rtf.RTFPageHeader(
        text="CONFIDENTIAL - Study XYZ-789 - Adverse Event Summary"
    ),
    rtf_title=rtf.RTFTitle(
        text=["Adverse Event Summary by Treatment Group", "System Organ Class Analysis", "Integrated Safety Analysis Set"]
    ),
    rtf_column_header=[
        rtf.RTFColumnHeader(
            df=pd.DataFrame([['System Organ Class', 'Total Subjects', 'Total Events', 'Unique Terms', 'Avg Events/Subject']]),
            col_rel_width=[3, 1.5, 1.5, 1.5, 1.5],
            text_justification=["l", "c", "c", "c", "c"],
            text_format=["b"] * 5,
            text_background_color=["lightblue"] * 5,
            border_top=["single"] * 5,
            border_bottom=["single"] * 5
        )
    ],
    rtf_body=rtf.RTFBody(
        page_by=["Treatment_Group"],  # Group by treatment
        new_page=True,  # New page for each treatment
        pageby_header=True,  # Show treatment as header
        col_rel_width=[3, 1.5, 1.5, 1.5, 1.5],
        text_justification=["l", "c", "c", "c", "c"],
        # Alternate row colors within each group
        text_background_color=["white", "lightgray"] * 3,
        border_left=["single", "", "", "", ""],
        border_right=["", "", "", "", "single"]
    ),
    rtf_footnote=rtf.RTFFootnote(
        text="Summary includes all treatment-emergent adverse events reported during the study period. " +
             "Subjects may contribute to multiple system organ classes."
    ),
    rtf_source=rtf.RTFSource(
        text="Generated: {DATETIME} | Source: Integrated ADAE Analysis Dataset v2.1"
    )
)

# Write advanced grouped file
doc_advanced.write_rtf("ae_summary_by_treatment.rtf")
print("Created ae_summary_by_treatment.rtf with treatment grouping")
```

```
Created ae_summary_by_treatment.rtf with treatment grouping
```

## Mixed Grouping - No Forced Page Breaks

Demonstrate grouping without forced page breaks:

```{python}
# Create a version that groups but doesn't force page breaks
doc_mixed = rtf.RTFDocument(
    df=df_ae.head(40),  # Use subset for cleaner example
    rtf_page=rtf.RTFPage(
        nrow=50,  # Large page to accommodate multiple groups
        orientation="portrait"
    ),
    rtf_title=rtf.RTFTitle(
        text=["Adverse Events - Grouped Display", "Multiple System Organ Classes per Page"]
    ),
    rtf_column_header=[
        rtf.RTFColumnHeader(
            df=pd.DataFrame([['System Organ Class / Preferred Term', 'Placebo n(%)', 'Drug 5mg n(%)', 'Drug 10mg n(%)']]),
            col_rel_width=[4, 2, 2, 2],
            text_justification=["l", "c", "c", "c"],
            text_format=["b"] * 4,
            border_bottom=["single"] * 4
        )
    ],
    rtf_body=rtf.RTFBody(
        page_by=["SOC"],  # Group by SOC
        new_page=False,   # DON'T force new pages - allow multiple groups per page
        pageby_header=True,  # Still show group headers
        col_rel_width=[4, 2, 2, 2],
        text_justification=["l", "c", "c", "c"],
        # Highlight group headers with different formatting  
        text_format=["b", "", "", ""],  # Bold first column (will be group headers)
        text_background_color=["lightblue", "white", "white", "white"],
        border_left=["single", "", "", ""],
        border_right=["", "", "", "single"]
    ),
    rtf_footnote=rtf.RTFFootnote(
        text="System Organ Classes are grouped together but may appear on the same page to optimize space usage."
    )
)

doc_mixed.write_rtf("ae_mixed_grouping.rtf")
print("Created ae_mixed_grouping.rtf with mixed grouping (no forced page breaks)")
```

```
Created ae_mixed_grouping.rtf with mixed grouping (no forced page breaks)
```

## Convert to PDF

```{python}
# Convert all files to PDF
try:
    converter = rtf.LibreOfficeConverter()
    
    files_to_convert = [
        "ae_by_soc_grouped.rtf",
        "ae_summary_by_treatment.rtf", 
        "ae_mixed_grouping.rtf"
    ]
    
    for file in files_to_convert:
        converter.convert(
            input_files=file,
            output_dir=".",
            format="pdf",
            overwrite=True
        )
        print(f"âœ“ Converted {file} to PDF")
    
    print("\nAll PDF conversions completed successfully!")
    
except FileNotFoundError as e:
    print(f"Note: {e}")
    print("\nTo enable PDF conversion, install LibreOffice:")
    print("- macOS: brew install --cask libreoffice")
    print("- Ubuntu/Debian: sudo apt-get install libreoffice")
    print("- Windows: Download from https://www.libreoffice.org/")
    print("\nRTF files have been successfully created:")
    print("- ae_by_soc_grouped.rtf")
    print("- ae_summary_by_treatment.rtf")
    print("- ae_mixed_grouping.rtf")
    print("\nThese files can be opened in any RTF-compatible application.")
```

```
âœ“ Converted ae_by_soc_grouped.rtf to PDF
âœ“ Converted ae_summary_by_treatment.rtf to PDF
âœ“ Converted ae_mixed_grouping.rtf to PDF

All PDF conversions completed successfully!
```

## Key Features Demonstrated

### 1. Page-by Grouping Control
- **`page_by=["SOC"]`** groups data by System Organ Class
- **`page_by=["Treatment_Group"]`** groups by treatment arm
- Supports multiple grouping variables for complex hierarchies

### 2. Page Break Management
- **`new_page=True`** forces new page for each group
- **`new_page=False`** allows multiple groups per page
- Optimizes document length while maintaining readability

### 3. Group Headers
- **`pageby_header=True`** automatically creates group headers
- Headers display grouping variable values prominently
- Helps readers understand data organization

### 4. Clinical Reporting Features
- Proper adverse event table formatting
- Treatment group comparisons
- System organ class organization
- Regulatory-compliant footnotes and source attribution

## Best Practices for Clinical Grouping

1. **Choose appropriate grouping variables**:
   - Treatment arms for efficacy comparisons
   - System organ classes for adverse events
   - Study visits for longitudinal data
   - Sites for enrollment summaries

2. **Consider page break strategy**:
   - Use `new_page=True` for distinct sections (e.g., different treatments)
   - Use `new_page=False` for related subcategories within sections

3. **Optimize page utilization**:
   - Adjust `nrow` parameter based on expected group sizes
   - Use landscape orientation for wide grouped tables

4. **Maintain clinical standards**:
   - Include proper footnotes explaining grouping rationale
   - Add source attribution and generation timestamps
   - Use consistent formatting within and across groups

This grouping functionality enables creation of professional clinical reports that organize complex datasets into readable, regulatory-compliant documents.