<!-- `.md` and `.py` files are generated from the `.qmd` file. Please edit that file. -->

---
title: "Basic Multi-Page Tables"
format: gfm
eval: false
---

!!! tip

    To run the code from this article as a Python script:

    ```bash
    python3 examples/example-pagination-basic.py
    ```

This article demonstrates rtflite's pagination functionality for handling large datasets that exceed single page capacity. This mirrors r2rtf's `rtf_page(nrow = X)` functionality.

## Overview

When working with clinical study reports, 
TLFs often contain more rows than can fit on a single page. 
rtflite automatically handles pagination by:

- Splitting content across multiple pages when row limits are exceeded
- Repeating column headers on each page for readability
- Maintaining consistent formatting and borders across page breaks
- Supporting configurable page limits and orientation

## Imports

```{python}
import numpy as np
import polars as pl
import rtflite as rtf
```

## Create Large Dataset

For this example, we'll create a patient listing with 60 patients to demonstrate pagination:

```{python}
np.random.seed(42)  # For reproducible results

# Generate patient data
n_patients = 60
patient_data = {
    'SUBJID': [f'SUBJ-{i:03d}' for i in range(1, n_patients + 1)],
    'TREATMENT': np.random.choice(['Placebo', 'Drug 5mg', 'Drug 10mg'], n_patients),
    'AGE': np.random.randint(18, 85, n_patients),
    'SEX': np.random.choice(['M', 'F'], n_patients),
    'RACE': np.random.choice(['White', 'Black', 'Asian', 'Other'], n_patients),
    'WEIGHT': np.round(np.random.normal(70, 15, n_patients), 1),
    'HEIGHT': np.round(np.random.normal(170, 10, n_patients), 1),
    'BMI': np.round(np.random.normal(25, 4, n_patients), 1),
    'SITE': np.random.choice([f'Site {i:02d}' for i in range(1, 6)], n_patients)
}

df = pl.DataFrame(patient_data)
print(f"Dataset contains {len(df)} patients")
print(df.head())
```

```
Dataset contains 60 patients
shape: (5, 9)
┌─────────┬───────────┬─────┬─────┬───────┬────────┬────────┬──────┬─────────┐
│ SUBJID  ┆ TREATMENT ┆ AGE ┆ SEX ┆ RACE  ┆ WEIGHT ┆ HEIGHT ┆ BMI  ┆ SITE    │
│ ---     ┆ ---       ┆ --- ┆ --- ┆ ---   ┆ ---    ┆ ---    ┆ ---  ┆ ---     │
│ str     ┆ str       ┆ i64 ┆ str ┆ str   ┆ f64    ┆ f64    ┆ f64  ┆ str     │
╞═════════╪═══════════╪═════╪═════╪═══════╪════════╪════════╪══════╪═════════╡
│ SUBJ-001 ┆ Drug 5mg  ┆ 64  ┆ M   ┆ Other ┆ 49.9   ┆ 175.4  ┆ 16.2 ┆ Site 04 │
│ SUBJ-002 ┆ Drug 10mg ┆ 67  ┆ F   ┆ White ┆ 88.1   ┆ 154.9  ┆ 36.7 ┆ Site 02 │
│ SUBJ-003 ┆ Placebo   ┆ 20  ┆ F   ┆ White ┆ 87.3   ┆ 168.9  ┆ 30.6 ┆ Site 01 │
│ SUBJ-004 ┆ Drug 5mg  ┆ 48  ┆ F   ┆ White ┆ 61.4   ┆ 167.8  ┆ 21.8 ┆ Site 02 │
│ SUBJ-005 ┆ Drug 10mg ┆ 64  ┆ M   ┆ White ┆ 85.2   ┆ 181.4  ┆ 25.9 ┆ Site 01 │
└─────────┴───────────┴─────┴─────┴───────┴────────┴────────┴──────┴─────────┘
```

## Basic Pagination Configuration

Configure RTF document with pagination settings:

```{python}
# Create column headers
header = pl.DataFrame([['Subject ID', 'Treatment', 'Age', 'Sex', 'Race', 'Weight (kg)', 'Height (cm)', 'BMI', 'Site']], orient = "row")

# Create RTF document with pagination
doc = rtf.RTFDocument(
    df=df,
    rtf_page=rtf.RTFPage(
        nrow=20,  # Limit to 20 rows per page
        orientation="portrait"
    ),
    rtf_title=rtf.RTFTitle(
        text=["Patient Demographics and Baseline Characteristics", "Study ABC-123 - Patient Listing"]
    ),
    rtf_column_header=[
        rtf.RTFColumnHeader(
            df=header,
            col_rel_width=[1.2, 1.5, 0.8, 0.6, 1.0, 1.0, 1.0, 0.8, 1.0],
            text_justification=["c"] * 9,
            text_format=["b"] * 9,
            border_top=["single"] * 9,
            border_bottom=["single"] * 9
        )
    ],
    rtf_body=rtf.RTFBody(
        col_rel_width=[1.2, 1.5, 0.8, 0.6, 1.0, 1.0, 1.0, 0.8, 1.0],
        text_justification=["c", "l", "c", "c", "l", "c", "c", "c", "c"],
        border_left=["single"] + [""] * 8,
        border_right=[""] * 8 + ["single"]
    ),
    rtf_footnote=rtf.RTFFootnote(
        text="BMI = Body Mass Index (kg/m^2). All patients provided informed consent."
    ),
    rtf_source=rtf.RTFSource(
        text="Source: Clinical Database Snapshot 2024-01-15"
    )
)

# Write RTF file
doc.write_rtf("../rtf/patient_listing_paginated.rtf")
```

## Advanced Pagination with Page Headers

Add page-specific headers and footers:

```{python}
# Create document with page headers and footers
doc_advanced = rtf.RTFDocument(
    df=df,
    rtf_page=rtf.RTFPage(
        nrow=25,  # 25 rows per page
        orientation="landscape",  # Use landscape for wider tables
        page_title_location="first",  # Title only on first page
        page_footnote_location="last"  # Footnote only on last page
    ),
    rtf_page_header=rtf.RTFPageHeader(
        text="CONFIDENTIAL - Study ABC-123"
    ),
    rtf_page_footer=rtf.RTFPageFooter(
        text="Page {PAGE} of {NUMPAGES}"
    ),
    rtf_title=rtf.RTFTitle(
        text=["Complete Patient Listing", "Demographics and Baseline Characteristics", "All Randomized Subjects"]
    ),
    rtf_column_header=[
        rtf.RTFColumnHeader(
            df=header,
            col_rel_width=[1.2, 1.5, 0.8, 0.6, 1.0, 1.0, 1.0, 0.8, 1.0],
            text_justification=["c"] * 9,
            text_format=["b"] * 9,
            border_top=["single"] * 9,
            border_bottom=["single"] * 9,
            text_background_color=["lightgray"] * 9
        )
    ],
    rtf_body=rtf.RTFBody(
        col_rel_width=[1.2, 1.5, 0.8, 0.6, 1.0, 1.0, 1.0, 0.8, 1.0],
        text_justification=["c", "l", "c", "c", "l", "c", "c", "c", "c"],
        border_left=["single"] + [""] * 8,
        border_right=[""] * 8 + ["single"],
        # Alternate row colors for better readability
        text_background_color=["white", "lightgray"] * 5
    ),
    rtf_footnote=rtf.RTFFootnote(
        text="Generated on {DATE}. BMI calculated as weight(kg)/height(m)^2. Missing values indicated by blank cells."
    ),
    rtf_source=rtf.RTFSource(
        text="Source: EDC System Export - Clinical Database Lock 2024-01-15 14:30 UTC"
    )
)

# Write advanced RTF file
doc_advanced.write_rtf("../rtf/patient_listing_advanced.rtf")
print("Created patient_listing_advanced.rtf with multi-page layout")
```

```
Created patient_listing_advanced.rtf with multi-page layout
```

## Convert to PDF

```
PDF conversion completed
```

## Key Features Demonstrated

This example showcases several important pagination features:

### 1. Automatic Row Limit Management
- **`nrow=20`** limits each page to 20 data rows
- Content automatically flows to next page when limit exceeded
- Maintains table structure and formatting consistency

### 2. Column Header Repetition
- Headers automatically repeat on each new page
- Ensures readability without referring back to first page
- Maintains formatting and borders across pages

### 3. Page Element Control
- **`page_title_location="first"`** shows title only on first page
- **`page_footnote_location="last"`** shows footnote only on last page
- Reduces redundancy while maintaining necessary information

### 4. Clinical Document Standards
- Page headers with confidentiality notices
- Page numbering in footers
- Source attribution and generation timestamps
- Consistent formatting for regulatory compliance

## Best Practices

When implementing pagination for clinical documents:

1. **Choose appropriate row limits** based on content complexity and page size
2. **Use landscape orientation** for wide tables with many columns
3. **Include page headers** with study identifiers and confidentiality notices
4. **Add generation timestamps** for audit trail requirements
5. **Test with representative data** to ensure proper page breaks
6. **Consider alternating row colors** for improved readability across pages

This pagination approach ensures that large clinical datasets can be presented in professional, readable RTF documents that meet regulatory submission requirements.