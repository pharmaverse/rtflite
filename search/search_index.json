{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rtflite","text":"<p>Lightweight RTF composer for Python.</p> <p>Specializes in precise formatting of production-quality tables and figures. Inspired by r2rtf.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install rtflite from PyPI:</p> <pre><code>pip install rtflite\n</code></pre> <p>Or install the development version from GitHub:</p> <pre><code>git clone https://github.com/pharmaverse/rtflite.git\ncd rtflite\npython3 -m pip install -e .\n</code></pre>"},{"location":"#install-libreoffice-optional","title":"Install LibreOffice (optional)","text":"<p>rtflite can convert RTF documents to PDF using LibreOffice. To enable this feature, install LibreOffice (free and open source, MPL license).</p> <p>See the converter setup guide for detailed instructions.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to rtflite. Please read the rtflite Contributing Guidelines to get started.</p> <p>All interactions within rtflite repositories and issue trackers should adhere to the rtflite Contributor Code of Conduct.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#rtflite-102","title":"rtflite 1.0.2","text":""},{"location":"changelog/#typing","title":"Typing","text":"<ul> <li>Adopted modern typing best practices: use <code>|</code> unions instead of   <code>Union</code>/<code>Optional</code>, and built-in generics instead of <code>typing</code> aliases (#95).</li> <li>Resolved all mypy issues; type checks now pass cleanly (#97, #99, #101).</li> <li>Added a mypy GitHub Actions workflow for continuous type checking (#100).</li> </ul>"},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>Added a developer script to compare current RTF outputs with snapshots   generated from mkdocs site articles (#102).</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Updated <code>CLAUDE.md</code> to replace outdated <code>.qmd</code>-based rendering instructions   with the markdown-exec approach (#93).</li> </ul>"},{"location":"changelog/#rtflite-101","title":"rtflite 1.0.1","text":""},{"location":"changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fixed hard-coded font in pagination calculations to properly use   user-selected fonts (#91).</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Lowered minimum Pillow version to 8.0.0 with automatic font size type   coercion to <code>int</code> for Pillow &lt; 10.0.0 compatibility (#89).</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Improved readability and technical accuracy of documentation (#85, #86, #87).</li> </ul>"},{"location":"changelog/#rtflite-100","title":"rtflite 1.0.0","text":"<p>This major release marks rtflite as production-ready for table, listing, and figure generation in RTF format. It introduces advanced pagination features, enhanced group handling, complete color support, and significant architectural improvements for better maintainability and performance.</p>"},{"location":"changelog/#new-features","title":"New features","text":"<ul> <li> <p>Advanced pagination features</p> <ul> <li>Added the <code>subline_by</code> parameter for creating paragraph headers before each page group.</li> <li>Enhanced <code>group_by</code> functionality with hierarchical value suppression within groups.</li> <li>Implemented page context restoration for multi-page tables with <code>group_by</code>.</li> </ul> </li> <li> <p>Enhanced color system</p> <ul> <li>Complete 657-color support with full r2rtf R package compatibility.</li> </ul> </li> <li> <p>Text conversion improvements</p> <ul> <li>Text conversion (LaTeX to Unicode) enabled by default for all components.</li> <li>Better handling of special characters and symbols.</li> <li>Enhanced validation for text conversion operations.</li> </ul> </li> <li> <p>Table formatting</p> <ul> <li>Added the <code>as_table</code> parameter for <code>RTFFootnote</code> and <code>RTFSource</code> components.</li> <li>Auto-inheritance of <code>col_rel_width</code> from <code>rtf_body</code> to <code>rtf_column_header</code>.</li> <li>Improved handling of table borders and footnote placement.</li> </ul> </li> </ul>"},{"location":"changelog/#architecture-improvements","title":"Architecture improvements","text":"<ul> <li> <p>Service-oriented architecture</p> <ul> <li>Introduced dedicated service layer for complex operations.</li> <li>Implemented strategy pattern for encoding (<code>SinglePageStrategy</code>, <code>PaginatedStrategy</code>).</li> <li>Created <code>RTFEncodingEngine</code> for strategy orchestration.</li> </ul> </li> <li> <p>Code organization</p> <ul> <li>Consolidated constants and eliminated magic numbers throughout the codebase.</li> <li>Method decomposition and improved input validation.</li> <li>Cleaner public interfaces with thorough error handling.</li> </ul> </li> </ul>"},{"location":"changelog/#dependency-changes","title":"Dependency changes","text":"<ul> <li>Removed numpy and pandas as hard dependencies.</li> <li>Moved pyarrow to development dependencies.</li> <li>Now uses narwhals for DataFrame abstraction.</li> <li>Prefer polars as the primary DataFrame interface.</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>Added vignette-style articles to document the new features.</li> <li>Reorganized API reference for better user experience.</li> <li>Renamed documentation files to use hyphens consistently.</li> <li>Updated all examples to use modern best practices.</li> <li>Fixed Polars <code>DataOrientationWarning</code> in documentation examples.</li> </ul>"},{"location":"changelog/#testing_1","title":"Testing","text":"<ul> <li>Added single-page RTF tests with fixtures generated by r2rtf.</li> <li>Added extensive multi-page tests for the <code>as_table</code> feature.</li> </ul>"},{"location":"changelog/#rtflite-013","title":"rtflite 0.1.3","text":""},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>Add contributing guidelines to make it easy for onboarding new developers   to the recommended development workflow (#25).</li> <li>Update <code>README.md</code> to add hyperlink to the R package r2rtf (#24).</li> </ul>"},{"location":"changelog/#maintenance","title":"Maintenance","text":"<ul> <li>Remove the strict version requirement for the development dependency   mkdocs-autorefs (#21).</li> </ul>"},{"location":"changelog/#rtflite-012","title":"rtflite 0.1.2","text":""},{"location":"changelog/#maintenance_1","title":"Maintenance","text":"<ul> <li>Manage project with uv (#19).</li> <li>Update the logo image generation workflow to use web fonts (#18).</li> </ul>"},{"location":"changelog/#rtflite-011","title":"rtflite 0.1.1","text":""},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>Use absolute URL to replace relative path for logo image in <code>README.md</code>,   for proper rendering on PyPI (#16).</li> </ul>"},{"location":"changelog/#rtflite-010","title":"rtflite 0.1.0","text":""},{"location":"changelog/#new-features_1","title":"New features","text":"<ul> <li>Introduced core RTF document components, such as <code>RTFDocument</code>, <code>RTFPage</code>,   <code>RTFTitle</code>, <code>RTFColumnHeader</code>, and <code>RTFBody</code>. These classes establish the   foundation for composing structured RTF documents with a text encoding   pipeline. Use Pydantic for data validation.</li> <li>Implemented string width calculation using Pillow with metric-compatible fonts.   This will be incorporated in the pagination and layout algorithms in   future releases.</li> <li>Implemented a LibreOffice-based document converter for RTF to PDF conversion   with automatic LibreOffice detection mechanisms under Linux, macOS, and Windows.</li> </ul>"},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>Added an article on creating baseline characteristics tables.</li> <li>Integrated code coverage reports via pytest-cov into the documentation site.</li> </ul>"},{"location":"contributing/","title":"Contributing to rtflite","text":""},{"location":"contributing/#developer-workflow","title":"Developer workflow","text":""},{"location":"contributing/#setup","title":"Setup","text":"<p>First off, install uv. rtflite uses uv to manage the Python package development environment.</p> <p>If you have trouble installing the exact Python version pinned in the project, run</p> <pre><code>uv self update\n</code></pre> <p>to update your uv installation.</p>"},{"location":"contributing/#branching","title":"Branching","text":"<p>Clone the repository (if you have no direct access, replace the address with your forked repository address):</p> <pre><code>git clone https://github.com/pharmaverse/rtflite.git\n</code></pre> <p>Create a dedicated branch:</p> <pre><code>cd rtflite\ngit checkout -b my-branch\n</code></pre>"},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>Restore the environment using uv sync. This will restore the exact versions of Python and dependency packages under the project's <code>.venv/</code> directory:</p> <pre><code>uv sync\n</code></pre>"},{"location":"contributing/#development","title":"Development","text":"<p>Open the project in VS Code:</p> <pre><code>code rtflite\n</code></pre> <p>Make changes to the codebase.</p> <p>We use pytest for unit testing. To run tests and get an HTML preview of code coverage, open the VS Code terminal:</p> <pre><code>pytest\npytest tests/specific_test.py\npytest --cov=rtflite --cov-report=html:docs/coverage/\n</code></pre> <p>Virtual environment activation</p> <p>If your terminal did not activate the virtual environment for some reason (with symptoms like not finding pytest commands), activate it manually:</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>To preview the mkdocs website locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>To build the mkdocs website locally into <code>site/</code>, run:</p> <pre><code>mkdocs build\n</code></pre> <p>rtflite renders vignette-like articles under <code>docs/articles</code>using markdown-exec. This allows mkdocs to render Python code chunks and their outputs when building the site. Check the markdown-exec documentation for possible code chunk options.</p> <p>If you made changes to the <code>.md</code> files in the root directory, make sure to synchronize them to the mkdocs website:</p> <pre><code>sh docs/scripts/sync.sh\n</code></pre>"},{"location":"contributing/#formatting","title":"Formatting","text":"<p>Use isort and ruff to sort imports and format Python code:</p> <pre><code>isort .\nruff format\n</code></pre>"},{"location":"contributing/#pull-request","title":"Pull request","text":"<p>Add, commit, and push to remote, then send a pull request:</p> <pre><code>git add -A\ngit commit -m \"Your commit message\"\ngit push origin my-branch\n</code></pre>"},{"location":"contributing/#maintainer-workflow","title":"Maintainer workflow","text":""},{"location":"contributing/#updates","title":"Updates","text":"<p>Update local uv version:</p> <pre><code>uv self update\n</code></pre> <p>Update <code>uv.lock</code> file regularly:</p> <pre><code>uv sync --quiet\nuv lock --upgrade\nuv sync\n</code></pre>"},{"location":"contributing/#python-version","title":"Python version","text":"<p>Pin a newer Python version in <code>.python-version</code> when appropriate:</p> <pre><code>uv python pin x.y.z\n</code></pre> <p>The latest Python release versions are often promptly supported by uv.</p>"},{"location":"contributing/#publishing","title":"Publishing","text":"<p>Publish on PyPI (maintainer token required):</p> <pre><code>uv build\nuv publish\n</code></pre>"},{"location":"articles/advanced-group-by/","title":"Advanced features: group_by","text":"<p>This example demonstrates advanced table formatting features in rtflite, focusing on the <code>group_by</code> functionality that provides enhanced readability by suppressing duplicate values within groups.</p>"},{"location":"articles/advanced-group-by/#overview","title":"Overview","text":"<p>The <code>group_by</code> feature is particularly useful for clinical trial listings where multiple rows belong to the same subject or treatment group. Instead of repeating identical values in every row, <code>group_by</code> displays the value only once per group, leaving subsequent rows blank for better visual organization.</p> <p>Key benefits</p> <ul> <li>Improved readability: Reduces visual clutter by eliminating redundant information</li> <li>Clinical standards compliance: Follows pharmaceutical industry conventions for listing formats</li> <li>Hierarchical grouping: Supports multiple columns with nested group relationships</li> </ul>"},{"location":"articles/advanced-group-by/#imports","title":"Imports","text":"<pre><code>from importlib.resources import files\n\nimport polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/advanced-group-by/#load-and-prepare-adverse-events-data","title":"Load and prepare adverse events data","text":"<p>Load the adverse events dataset and create a subset for demonstration:</p> <pre><code># Load adverse events data from parquet file\ndata_path = files(\"rtflite.data\").joinpath(\"adae.parquet\")\ndf = pl.read_parquet(data_path)\n\n# Take a subset of the data for this example (rows 200-260)\nae_subset = df.slice(200, 60)\n</code></pre> <p>Create additional columns for a more comprehensive listing format:</p> <pre><code># Create formatted columns for the listing\nae_t1 = ae_subset.with_columns(\n    [\n        # Create subline header with study and site information\n        (\n            pl.lit(\"Trial Number: \")\n            + pl.col(\"STUDYID\")\n            + pl.lit(\", Site Number: \")\n            + pl.col(\"SITEID\").cast(pl.String)\n        ).alias(\"SUBLINEBY\"),\n        # Create subject line with demographic information\n        (\n            pl.lit(\"Subject ID = \")\n            + pl.col(\"USUBJID\")\n            + pl.lit(\", Gender = \")\n            + pl.col(\"SEX\")\n            + pl.lit(\", Race = \")\n            + pl.col(\"RACE\")\n            + pl.lit(\", AGE = \")\n            + pl.col(\"AGE\").cast(pl.String)\n            + pl.lit(\" Years\")\n            + pl.lit(\", TRT = \")\n            + pl.col(\"TRTA\")\n        ).alias(\"SUBJLINE\"),\n        # Format adverse event term (title case)\n        pl.col(\"AEDECOD\").str.to_titlecase().alias(\"AEDECD1\"),\n        # Create duration string\n        (pl.col(\"ADURN\").cast(pl.String) + pl.lit(\" \") + pl.col(\"ADURU\")).alias(\"DUR\"),\n    ]\n).select(\n    [\n        \"SUBLINEBY\",\n        \"TRTA\",\n        \"SUBJLINE\",\n        \"USUBJID\",\n        \"ASTDY\",\n        \"AEDECD1\",\n        \"DUR\",\n        \"AESEV\",\n        \"AESER\",\n        \"AEREL\",\n        \"AEACN\",\n        \"AEOUT\",\n    ]\n)\n\n# Sort by key variables to group related events together\nae_t1 = ae_t1.sort([\"SUBLINEBY\", \"TRTA\", \"SUBJLINE\", \"USUBJID\", \"ASTDY\"])\n</code></pre>"},{"location":"articles/advanced-group-by/#demonstrate-single-column-group_by","title":"Demonstrate single column group_by","text":"<p>Start with a simple example using a single column for grouping:</p> <pre><code># Create RTF document with single column group_by\ndoc_single = rtf.RTFDocument(\n    df=ae_t1.select([\"USUBJID\", \"AEDECD1\", \"AESEV\", \"AESER\"])\n    .head(15)\n    .sort([\"USUBJID\", \"AEDECD1\"]),\n    rtf_title=rtf.RTFTitle(\n        text=[\"Adverse Events Listing\", \"Example 1: Single Column group_by\"],\n        text_convert=False,\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"Subject ID\", \"Adverse Event\", \"Severity\", \"Serious\"],\n        text_format=\"b\",\n        text_justification=[\"l\", \"l\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        group_by=[\"USUBJID\", \"AEDECD1\"],  # Group by subject ID and adverse event\n        col_rel_width=[3, 4, 2, 2],\n        text_justification=[\"l\", \"l\", \"c\", \"c\"],\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=\"Note: Subject ID and Adverse Event values are shown only once per group for better readability\",\n        text_convert=False,\n    ),\n)\n\n# Generate the RTF file\ndoc_single.write_rtf(\"advanced-group-by-single.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/advanced-group-by/#multi-page-example-with-group-context","title":"Multi-page example with group context","text":"<p>Demonstrate how group_by works with pagination, including context restoration:</p> <pre><code># Create larger dataset for multi-page demonstration\nae_large = ae_t1.head(100)  # Use more rows to trigger pagination\n\ndoc_multipage = rtf.RTFDocument(\n    df=ae_large.select([\"USUBJID\", \"ASTDY\", \"AEDECD1\", \"AESEV\", \"AESER\"]).sort(\n        [\"USUBJID\", \"ASTDY\"]\n    ),\n    rtf_page=rtf.RTFPage(nrow=25),  # Force pagination\n    rtf_title=rtf.RTFTitle(\n        text=[\"Adverse Events Listing\", \"Example 3: Multi-page with group_by\"],\n        text_convert=False,\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"Subject ID\", \"Study Day\", \"Adverse Event\", \"Severity\", \"Serious\"],\n        text_format=\"b\",\n        text_justification=[\"l\", \"c\", \"l\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        group_by=[\"USUBJID\", \"ASTDY\"],\n        col_rel_width=[3, 1, 4, 2, 2],\n        text_justification=[\"l\", \"c\", \"l\", \"c\", \"c\"],\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Note: In multi-page listings, group context is automatically restored\",\n            \"at the beginning of each new page for better readability.\",\n        ],\n        text_convert=False,\n    ),\n)\n\n# Generate the RTF file\ndoc_multipage.write_rtf(\"advanced-group-by-multipage.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/advanced-group-by/#combining-group_by-with-new_page-treatment-separation","title":"Combining group_by with new_page (treatment separation)","text":"<p>Demonstrate the powerful combination of <code>group_by</code> and <code>new_page</code> for clinical trial reporting:</p> <pre><code># Create treatment-separated document with group_by within each page\n# Filter data to have multiple treatment groups\nae_with_treatments = (\n    ae_t1.filter(pl.col(\"TRTA\").is_in([\"Placebo\", \"Xanomeline High Dose\"]))\n    .select([\"TRTA\", \"USUBJID\", \"ASTDY\", \"AEDECD1\", \"AESEV\"])\n    .head(40)\n    .sort([\"TRTA\", \"USUBJID\", \"ASTDY\"])\n)\n\ndoc_treatment_separated = rtf.RTFDocument(\n    df=ae_with_treatments,\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Adverse Events Listing\",\n            \"Example 5: group_by + new_page (Treatment Separation)\",\n        ],\n        text_convert=False,\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"Treatment\", \"Subject ID\", \"Study Day\", \"Adverse Event\", \"Severity\"],\n        text_format=\"b\",\n        text_justification=[\"l\", \"l\", \"c\", \"l\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        page_by=[\"TRTA\"],  # Separate pages by treatment\n        new_page=True,  # Force new page for each treatment\n        group_by=[\n            \"TRTA\",\n            \"USUBJID\",\n            \"ASTDY\",\n        ],  # Suppress duplicates within each treatment page\n        col_rel_width=[2, 3, 1, 4, 2],\n        text_justification=[\"l\", \"l\", \"c\", \"l\", \"c\"],\n        pageby_header=True,  # Repeat headers on each treatment page\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Example of group_by + new_page combination:\",\n            \"- Each treatment group gets its own page(s) (new_page=True)\",\n            \"- Within each treatment, USUBJID and ASTDY are suppressed when duplicate (group_by)\",\n            \"- Headers are repeated on each treatment page (pageby_header=True)\",\n        ],\n        text_convert=False,\n    ),\n)\n\n# Generate the RTF file\ndoc_treatment_separated.write_rtf(\"advanced-group-by-group-newpage.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/advanced-group-by/#demonstrating-subline_by-with-subheader-generation","title":"Demonstrating subline_by with subheader generation","text":"<p>The <code>subline_by</code> feature creates visually distinct subheader rows that group related data, making listings easier to read and follow:</p> <pre><code># Create data with clear grouping structure for subline demonstration\nae_subline_data = (\n    ae_t1.filter(pl.col(\"TRTA\").is_in([\"Placebo\", \"Xanomeline High Dose\"]))\n    .head(30)\n    .sort([\"SUBLINEBY\", \"TRTA\", \"USUBJID\"])\n)\n\n# Create RTF document with subline_by to generate subheaders\ndoc_subline = rtf.RTFDocument(\n    df=ae_subline_data.select([\"SUBLINEBY\", \"USUBJID\", \"AEDECD1\", \"AESEV\", \"AESER\"]),\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Adverse Events Listing\",\n            \"Example 6: subline_by with Subheader Generation\",\n        ],\n        text_convert=False,\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Subject ID\",\n            \"Adverse Event\",\n            \"Severity\",\n            \"Serious\",\n        ],  # Headers for remaining columns after SUBLINEBY removal\n        text_format=\"b\",\n        text_justification=[\"l\", \"l\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        subline_by=[\"SUBLINEBY\"],  # Creates subheader rows from SUBLINEBY values\n        col_rel_width=[\n            3,\n            4,\n            2,\n            2,\n        ],  # Widths for remaining 4 columns after SUBLINEBY removal\n        text_justification=[\"l\", \"l\", \"c\", \"c\"],\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Note: subline_by creates subheader rows that span all columns\",\n            \"- SUBLINEBY column values become bold subheader text\",\n            \"- Original SUBLINEBY column is removed from table data\",\n            \"- Subheaders provide clear visual grouping of related records\",\n        ],\n        text_convert=False,\n    ),\n)\n\n# Generate the RTF file\ndoc_subline.write_rtf(\"advanced-group-by-subline.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/advanced-group-by/#advanced-combination-subline_by-with-group_by","title":"Advanced combination - subline_by with group_by","text":"<p>Demonstrate the powerful combination of <code>subline_by</code> and <code>group_by</code> for comprehensive clinical listings:</p> <pre><code># Create data with multiple visits per subject for comprehensive demonstration\nae_comprehensive = (\n    ae_t1.head(40)\n    .with_columns(\n        [\n            # Add visit information to create multiple rows per subject\n            pl.when(pl.int_range(pl.len()) % 3 == 0)\n            .then(pl.lit(\"Visit 1\"))\n            .when(pl.int_range(pl.len()) % 3 == 1)\n            .then(pl.lit(\"Visit 2\"))\n            .otherwise(pl.lit(\"Visit 3\"))\n            .alias(\"VISIT\")\n        ]\n    )\n    .sort([\"SUBLINEBY\", \"USUBJID\", \"VISIT\"])\n)\n\ndoc_comprehensive = rtf.RTFDocument(\n    df=ae_comprehensive.select([\"SUBLINEBY\", \"USUBJID\", \"VISIT\", \"AEDECD1\", \"AESEV\"]),\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Adverse Events Listing\",\n            \"Example 7: subline_by + group_by Comprehensive\",\n        ],\n        text_convert=False,\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Subject ID\",\n            \"Visit\",\n            \"Adverse Event\",\n            \"Severity\",\n        ],  # Headers for remaining columns after SUBLINEBY removal\n        text_format=\"b\",\n        text_justification=[\"l\", \"c\", \"l\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        subline_by=[\"SUBLINEBY\"],  # Creates trial/site subheaders\n        group_by=[\"USUBJID\"],  # Suppresses duplicate subject IDs\n        col_rel_width=[\n            3,\n            2,\n            4,\n            2,\n        ],  # Widths for remaining 4 columns after SUBLINEBY removal\n        text_justification=[\"l\", \"c\", \"l\", \"c\"],\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Advanced example combining subline_by and group_by:\",\n            \"- SUBLINEBY creates bold subheader rows for trial/site information\",\n            \"- group_by suppresses duplicate USUBJID values within each group\",\n            \"- Result: Clear visual hierarchy with minimal redundancy\",\n        ],\n        text_convert=False,\n    ),\n)\n\n# Generate the RTF file\ndoc_comprehensive.write_rtf(\"advanced-group-by-comprehensive.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/converter-setup/","title":"Converter setup","text":"<p>rtflite can convert RTF documents to PDF using LibreOffice. This guide shows how to install and use LibreOffice for PDF conversion.</p>"},{"location":"articles/converter-setup/#install-libreoffice","title":"Install LibreOffice","text":"<p>On macOS (using Homebrew):</p> <pre><code>brew install --cask libreoffice\n</code></pre> <p>On Ubuntu/Debian:</p> <pre><code>sudo apt-get install libreoffice\n</code></pre> <p>On Windows (using Chocolatey):</p> <pre><code>choco install libreoffice\n</code></pre> <p>Tip</p> <p>After installation, restart your shell to ensure <code>PATH</code> updates are loaded so that rtflite can find LibreOffice.</p>"},{"location":"articles/converter-setup/#using-the-converter","title":"Using the converter","text":"<p>Once LibreOffice is installed, convert RTF files to PDF in your code:</p> <pre><code>import rtflite as rtf\n\n# Create your RTF document\ndoc = rtf.RTFDocument(df=df, ...)\ndoc.write_rtf(\"output.rtf\")\n\n# Convert to PDF\ntry:\n    converter = rtf.LibreOfficeConverter()\n    converter.convert(\n        input_files=\"output.rtf\",\n        output_dir=\".\",\n        format=\"pdf\",\n        overwrite=True\n    )\n    print(\"PDF created successfully!\")\nexcept FileNotFoundError:\n    print(\"LibreOffice not found. Please install it for PDF conversion.\")\n</code></pre>"},{"location":"articles/converter-setup/#custom-installation-paths","title":"Custom installation paths","text":"<p>If LibreOffice is installed in a non-standard location, you can specify the path:</p> <pre><code>converter = rtf.LibreOfficeConverter(\n    executable_path=\"/custom/path/to/soffice\"\n)\n</code></pre>"},{"location":"articles/converter-setup/#supported-output-formats","title":"Supported output formats","text":"<p>Besides PDF, LibreOffice can convert RTF to:</p> <ul> <li><code>docx</code> - Microsoft Word format</li> <li><code>html</code> - HTML format</li> <li><code>odt</code> - OpenDocument Text format</li> </ul> <p>Example: <pre><code>converter.convert(input_files=\"output.rtf\", output_dir=\".\", format=\"docx\")\n</code></pre></p>"},{"location":"articles/converter-setup/#batch-conversion","title":"Batch conversion","text":"<p>Convert multiple RTF files at once:</p> <pre><code>files = [\"file1.rtf\", \"file2.rtf\", \"file3.rtf\"]\nconverter = rtf.LibreOfficeConverter()\nconverter.convert(\n    input_files=files,\n    output_dir=\"pdfs/\",\n    format=\"pdf\",\n    overwrite=True\n)\n</code></pre>"},{"location":"articles/converter-setup/#cicd-integration","title":"CI/CD integration","text":"<p>For automated workflows:</p>"},{"location":"articles/converter-setup/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Install LibreOffice\n  run: |\n    sudo apt-get update\n    sudo apt-get install -y libreoffice\n</code></pre>"},{"location":"articles/converter-setup/#docker","title":"Docker","text":"<pre><code>FROM python:3.13\nRUN apt-get update &amp;&amp; apt-get install -y libreoffice\n</code></pre>"},{"location":"articles/converter-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"articles/converter-setup/#cant-find-libreoffice-executable-error","title":"\"Can't find LibreOffice executable\" error","text":"<ol> <li>Ensure LibreOffice is installed</li> <li>Restart your terminal/IDE</li> <li>Check if <code>soffice</code> is in your PATH:</li> <li>macOS/Linux: <code>which soffice</code></li> <li>Windows: <code>where soffice</code></li> <li>If not in PATH, specify the full path when creating the converter</li> </ol>"},{"location":"articles/converter-setup/#version-requirements","title":"Version requirements","text":"<p>Minimum version requirement</p> <p>rtflite requires LibreOffice version 7.1 or higher. Check your version:</p> <pre><code>soffice --version\n</code></pre>"},{"location":"articles/converter-setup/#performance-tips","title":"Performance tips","text":"<p>Optimization suggestions</p> <ol> <li>LibreOffice starts a background process for conversions.</li> <li>For batch conversions, reuse the same converter instance.</li> <li>The first conversion may be slower as LibreOffice initializes.</li> <li>Consider using thread-based parallel processing for large batches.</li> </ol>"},{"location":"articles/example-ae/","title":"AE summary","text":"<p>This example shows how to create a simplified adverse events summary table.</p>"},{"location":"articles/example-ae/#imports","title":"Imports","text":"<pre><code>from importlib.resources import files\n\nimport polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/example-ae/#create-data-for-rtf-table","title":"Create data for RTF table","text":"<p>Load adverse events data from parquet file:</p> <pre><code>data_path = files(\"rtflite.data\").joinpath(\"adae.parquet\")\ndf = pl.read_parquet(data_path)\n</code></pre> <p>Process the data to create summary statistics:</p> <pre><code># First, get the total number of subjects per treatment group\nsubjects_per_trt = df.group_by(\"TRTA\").agg(pl.col(\"USUBJID\").n_unique().alias(\"n_subj\"))\n\n# Count subjects with each AE by treatment group and calculate percentages\nae_t1 = (\n    df.group_by([\"TRTA\", \"AEDECOD\"])\n    .agg(pl.col(\"USUBJID\").n_unique().alias(\"n_ae\"))\n    .join(subjects_per_trt, on=\"TRTA\")\n    .with_columns((pl.col(\"n_ae\") / pl.col(\"n_subj\") * 100).round(2).alias(\"pct\"))\n    # Only show AE terms with at least 5 subjects in one treatment group\n    .filter(pl.col(\"n_ae\") &gt; 5)\n)\n\n# Pivot the data to create wide format with n and pct for each treatment\n# First, melt the n_ae and pct columns\nae_long = ae_t1.select([\"TRTA\", \"AEDECOD\", \"n_ae\", \"pct\"]).unpivot(\n    index=[\"TRTA\", \"AEDECOD\"],\n    on=[\"n_ae\", \"pct\"],\n    variable_name=\"var\",\n    value_name=\"value\",\n)\n\n# Create combined column names for pivoting\nae_long = ae_long.with_columns((pl.col(\"TRTA\") + \"_\" + pl.col(\"var\")).alias(\"temp\"))\n\n# Pivot to wide format\nae_wide = ae_long.pivot(values=\"value\", index=\"AEDECOD\", on=\"temp\").fill_null(0)\n\n# Ensure columns are in the correct order\ncol_order = [\n    \"AEDECOD\",\n    \"Placebo_n_ae\",\n    \"Placebo_pct\",\n    \"Xanomeline High Dose_n_ae\",\n    \"Xanomeline High Dose_pct\",\n    \"Xanomeline Low Dose_n_ae\",\n    \"Xanomeline Low Dose_pct\",\n]\n\nae_t1_final = (\n    ae_wide.select(col_order)\n    .with_columns(pl.col(pl.Float64).cast(pl.String))\n    .sort(\"AEDECOD\")\n)\n\nprint(ae_t1_final.head(10))\n</code></pre> <pre><code>shape: (10, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 AEDECOD      \u2506 Placebo_n_a \u2506 Placebo_pct \u2506 Xanomeline  \u2506 Xanomeline  \u2506 Xanomeline  \u2506 Xanomeline  \u2502\n\u2502 ---          \u2506 e           \u2506 ---         \u2506 High        \u2506 High        \u2506 Low         \u2506 Low         \u2502\n\u2502 str          \u2506 ---         \u2506 str         \u2506 Dose_n_ae   \u2506 Dose_pct    \u2506 Dose_n_ae   \u2506 Dose_pct    \u2502\n\u2502              \u2506 str         \u2506             \u2506 ---         \u2506 ---         \u2506 ---         \u2506 ---         \u2502\n\u2502              \u2506             \u2506             \u2506 str         \u2506 str         \u2506 str         \u2506 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 APPLICATION  \u2506 0.0         \u2506 0.0         \u2506 7.0         \u2506 8.86        \u2506 9.0         \u2506 11.69       \u2502\n\u2502 SITE         \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 DERMATITIS   \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 APPLICATION  \u2506 0.0         \u2506 0.0         \u2506 15.0        \u2506 18.99       \u2506 12.0        \u2506 15.58       \u2502\n\u2502 SITE         \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 ERYTHEMA     \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 APPLICATION  \u2506 0.0         \u2506 0.0         \u2506 9.0         \u2506 11.39       \u2506 9.0         \u2506 11.69       \u2502\n\u2502 SITE         \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 IRRITATION   \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 APPLICATION  \u2506 6.0         \u2506 8.7         \u2506 22.0        \u2506 27.85       \u2506 22.0        \u2506 28.57       \u2502\n\u2502 SITE         \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 PRURITUS     \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 APPLICATION  \u2506 0.0         \u2506 0.0         \u2506 6.0         \u2506 7.59        \u2506 0.0         \u2506 0.0         \u2502\n\u2502 SITE         \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 VESICLES     \u2506             \u2506             \u2506             \u2506             \u2506             \u2506             \u2502\n\u2502 COUGH        \u2506 0.0         \u2506 0.0         \u2506 0.0         \u2506 0.0         \u2506 6.0         \u2506 7.79        \u2502\n\u2502 DIARRHOEA    \u2506 9.0         \u2506 13.04       \u2506 0.0         \u2506 0.0         \u2506 0.0         \u2506 0.0         \u2502\n\u2502 DIZZINESS    \u2506 0.0         \u2506 0.0         \u2506 12.0        \u2506 15.19       \u2506 8.0         \u2506 10.39       \u2502\n\u2502 ERYTHEMA     \u2506 9.0         \u2506 13.04       \u2506 14.0        \u2506 17.72       \u2506 15.0        \u2506 19.48       \u2502\n\u2502 HEADACHE     \u2506 7.0         \u2506 10.14       \u2506 6.0         \u2506 7.59        \u2506 0.0         \u2506 0.0         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"articles/example-ae/#define-table-format","title":"Define table format","text":"<p>Prepare the data for RTF output:</p> <pre><code># Define column headers\nheader1 = [\" \", \"Placebo\", \"Drug High Dose\", \"Drug Low Dose\"]\nheader2 = [\" \", \"n\", \"(%)\", \"n\", \"(%)\", \"n\", \"(%)\"]\n\n# Create RTF components\ncol_header1 = rtf.RTFColumnHeader(\n    text=header1, col_rel_width=[4, 2, 2, 2], text_justification=[\"l\", \"c\", \"c\", \"c\"]\n)\n\ncol_header2 = rtf.RTFColumnHeader(\n    text=header2,\n    col_rel_width=[4] + [1] * 6,\n    text_justification=[\"l\", \"c\", \"c\", \"c\", \"c\", \"c\", \"c\"],\n    border_top=[\"\"] + [\"single\"] * 6,\n    border_left=[\"single\"] + [\"single\", \"\"] * 3,\n)\n\n# Create table body\ntbl_body = rtf.RTFBody(\n    col_rel_width=[4] + [1] * 6,\n    text_justification=[\"l\"] + [\"c\"] * 6,\n    border_left=[\"single\"] + [\"single\", \"\"] * 3,\n)\n</code></pre> <p>Create the RTF document with formatting:</p> <pre><code># Create RTF document\ndoc = rtf.RTFDocument(\n    df=ae_t1_final,\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Analysis of Subjects With Specific Adverse Events\",\n            \"(Incidence &gt; 5 Subjects in One or More Treatment Groups)\",\n            \"ASaT\",\n        ]\n    ),\n    rtf_column_header=[col_header1, col_header2],\n    rtf_body=tbl_body,\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\"{^\\\\dagger}This is footnote 1\", \"This is footnote 2\"],\n        text_convert=[[True]],  # Enable LaTeX symbol conversion\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: xxx\"]),\n)\n\n# Output .rtf file\ndoc.write_rtf(\"example-ae-summary.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/example-baseline/","title":"Baseline characteristics","text":""},{"location":"articles/example-baseline/#imports","title":"Imports","text":"<pre><code>from importlib.resources import files\n\nimport polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/example-baseline/#ingest-data","title":"Ingest data","text":"<p>Load data from parquet file:</p> <pre><code>data_path = files(\"rtflite.data\").joinpath(\"baseline.parquet\")\ndf = pl.read_parquet(data_path)\nprint(df)\n</code></pre> <pre><code>shape: (14, 10)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 var    \u2506 1        \u2506 1_pct \u2506 2        \u2506 \u2026 \u2506 3_pct \u2506 9999     \u2506 9999_pct \u2506 var_label   \u2502\n\u2502 ---    \u2506 ---      \u2506 ---   \u2506 ---      \u2506   \u2506 ---   \u2506 ---      \u2506 ---      \u2506 ---         \u2502\n\u2502 str    \u2506 str      \u2506 f64   \u2506 str      \u2506   \u2506 f64   \u2506 str      \u2506 f64      \u2506 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Female \u2506 53       \u2506 10.4  \u2506 50       \u2506 \u2026 \u2506 7.9   \u2506 143      \u2506 28.1     \u2506 Gender      \u2502\n\u2502 Male   \u2506 33       \u2506 6.5   \u2506 34       \u2506 \u2026 \u2506 8.7   \u2506 111      \u2506 21.9     \u2506 Gender      \u2502\n\u2502 &lt;65    \u2506 14       \u2506 2.8   \u2506 8        \u2506 \u2026 \u2506 2.2   \u2506 33       \u2506 6.5      \u2506 Age (Years) \u2502\n\u2502 65-80  \u2506 42       \u2506 8.3   \u2506 47       \u2506 \u2026 \u2506 10.8  \u2506 144      \u2506 28.3     \u2506 Age (Years) \u2502\n\u2502 &gt;80    \u2506 30       \u2506 5.9   \u2506 29       \u2506 \u2026 \u2506 3.5   \u2506 77       \u2506 15.2     \u2506 Age (Years) \u2502\n\u2502 \u2026      \u2506 \u2026        \u2506 \u2026     \u2506 \u2026        \u2506 \u2026 \u2506 \u2026     \u2506 \u2026        \u2506 \u2026        \u2506 \u2026           \u2502\n\u2502 Median \u2506 76.0     \u2506 null  \u2506 77.5     \u2506 \u2026 \u2506 null  \u2506 77.0     \u2506 null     \u2506 Age (Years) \u2502\n\u2502 Range  \u2506 52 to 89 \u2506 null  \u2506 51 to 88 \u2506 \u2026 \u2506 null  \u2506 51 to 89 \u2506 null     \u2506 Age (Years) \u2502\n\u2502 White  \u2506 78       \u2506 15.4  \u2506 78       \u2506 \u2026 \u2506 14.6  \u2506 230      \u2506 45.3     \u2506 Race        \u2502\n\u2502 Black  \u2506 8        \u2506 1.6   \u2506 6        \u2506 \u2026 \u2506 1.8   \u2506 23       \u2506 4.5      \u2506 Race        \u2502\n\u2502 Other  \u2506 0        \u2506 0.0   \u2506 0        \u2506 \u2026 \u2506 0.2   \u2506 1        \u2506 0.2      \u2506 Race        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Create header rows:</p> <pre><code>header1 = [\"\", \"Placebo\", \"Drug Low Dose\", \"Drug High Dose\", \"Total\"]\nheader2 = [\"\", \"n\", \"(%)\", \"n\", \"(%)\", \"n\", \"(%)\", \"n\", \"(%)\"]\n</code></pre>"},{"location":"articles/example-baseline/#compose-rtf","title":"Compose RTF","text":"<p>Create RTF document:</p> <pre><code>doc = rtf.RTFDocument(\n    df=df,\n    rtf_title=rtf.RTFTitle(\n        text=[\"Demographic and Anthropometric Characteristics\", \"ITT Subjects\"]\n    ),\n    rtf_column_header=[\n        rtf.RTFColumnHeader(text=header1, col_rel_width=[3] + [2] * 4),\n        rtf.RTFColumnHeader(\n            text=header2,\n            col_rel_width=[3] + [1.2, 0.8] * 4,\n            border_top=[\"\"] + [\"single\"] * 8,\n            border_left=[\"single\"] + [\"single\", \"\"] * 4,\n        ),\n    ],\n    rtf_body=rtf.RTFBody(\n        page_by=[\"var_label\"],\n        col_rel_width=[3] + [1.2, 0.8] * 4 + [3],\n        text_justification=[\"l\"] + [\"c\"] * 8 + [\"l\"],\n        text_format=[\"\"] * 9 + [\"b\"],\n        border_left=[\"single\"] + [\"single\", \"\"] * 4 + [\"single\"],\n        border_top=[\"\"] * 9 + [\"single\"],\n        border_bottom=[\"\"] * 9 + [\"single\"],\n    ),\n)\n\ndoc.write_rtf(\"example-baseline-char.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/example-efficacy/","title":"Efficacy analysis","text":"<p>This example demonstrates how to create a multi-section efficacy table using rtflite's multi-section functionality. The table shows ANCOVA results with separate sections for summary statistics, treatment comparisons, and model diagnostics.</p>"},{"location":"articles/example-efficacy/#imports","title":"Imports","text":"<pre><code>from importlib.resources import files\n\nimport polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/example-efficacy/#load-efficacy-data","title":"Load efficacy data","text":"<p>Load the three efficacy data tables from parquet files:</p> <pre><code># Load summary statistics table\ndata_path1 = files(\"rtflite.data\").joinpath(\"tbl1.parquet\")\ntbl1 = pl.read_parquet(data_path1)\n\n# Load treatment comparison table\ndata_path2 = files(\"rtflite.data\").joinpath(\"tbl2.parquet\")\ntbl2 = pl.read_parquet(data_path2)\n\n# Load model diagnostics table\ndata_path3 = files(\"rtflite.data\").joinpath(\"tbl3.parquet\")\ntbl3 = pl.read_parquet(data_path3)\n</code></pre>"},{"location":"articles/example-efficacy/#define-multi-section-rtf-table","title":"Define multi-section RTF table","text":"<p>Create an RTF document with multiple sections:</p> <pre><code># Define headers for each section\n# Section 1: Main efficacy table headers (8 columns)\nheader_11 = rtf.RTFColumnHeader(\n    text=[\"\", \"Baseline\", \"Week 20\", \"Change from Baseline\"],\n    col_rel_width=[1.2, 2, 2, 4],\n    text_justification=[\"l\", \"c\", \"c\", \"c\"],\n)\n\nheader_12 = rtf.RTFColumnHeader(\n    text=[\n        \"Treatment\",\n        \"N\",\n        \"Mean (SD)\",\n        \"N\",\n        \"Mean (SD)\",\n        \"N\",\n        \"Mean (SD)\",\n        \"LS Mean (95% CI){^a}\",\n    ],\n    col_rel_width=[1.2, 0.5, 1.5, 0.5, 1.5, 0.5, 1.5, 2],\n    text_justification=[\"l\"] + [\"c\"] * 7,\n    border_bottom=\"single\",\n)\n\n# Section 2: Model info headers\nheader_2 = rtf.RTFColumnHeader(\n    text=[\"Pairwise Comparison\", \"Difference in LS Mean (95% CI){^a}\", \"p-Value\"],\n    col_rel_width=[3.7, 3.5, 2],\n    text_justification=[\"l\", \"c\", \"c\"],\n)\n\n# Define RTFBody sections with different configurations\ntbl1_body = rtf.RTFBody(\n    col_rel_width=[1.2, 0.5, 1.5, 0.5, 1.5, 0.5, 1.5, 2],\n    text_justification=[\"l\"] + [\"c\"] * 7,\n)\n\ntbl2_body = rtf.RTFBody(\n    col_rel_width=[3.7, 3.5, 2],\n    text_justification=[\"l\"] + [\"c\"] * 2,\n    border_top=\"single\",\n)\n\ntbl3_body = rtf.RTFBody(text_justification=\"l\", border_top=\"single\")\n</code></pre> <p>Compose and write the multi-section RTF document:</p> <pre><code>doc = rtf.RTFDocument(\n    df=[tbl1, tbl2, tbl3],\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"ANCOVA of Change from Baseline at Week 20\",\n            \"Missing Data Approach\",\n            \"Analysis Population\",\n        ]\n    ),\n    rtf_column_header=[\n        [header_11, header_12],  # Headers for section 1 (2 header rows)\n        [header_2],  # Headers for section 2 (1 header row)\n        [None],  # Headers for section 3 (no headers)\n    ],\n    rtf_body=[tbl1_body, tbl2_body, tbl3_body],\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"{^a} Based on an ANCOVA model.\",\n            \"ANCOVA = Analysis of Covariance, CI = Confidence Interval, LS = Least Squares, SD = Standard Deviation\",\n        ]\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: [study999: adam-adeff]\"]),\n)\n\ndoc.write_rtf(\"example-efficacy.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/example-figure/","title":"Figures","text":"<p>This example shows how to create RTF documents with embedded figures using rtflite.</p>"},{"location":"articles/example-figure/#imports","title":"Imports","text":"<pre><code>from importlib.resources import files\n\n# Set matplotlib backend for headless environments (GitHub Actions)\nimport matplotlib\n\nmatplotlib.use(\"Agg\")\n\nimport matplotlib.pyplot as plt\nimport polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/example-figure/#create-age-histogram-by-treatment","title":"Create age histogram by treatment","text":"<pre><code># Load ADSL data\ndata_path = files(\"rtflite.data\").joinpath(\"adsl.parquet\")\ndf = pl.read_parquet(data_path)\n</code></pre> <pre><code># Create multiple age group histograms for different treatments\ntreatment_groups = df[\"TRT01A\"].unique().sort()\n\nfor i, treatment in enumerate(treatment_groups):\n    treatment_df = df.filter(pl.col(\"TRT01A\") == treatment)\n\n    # Create figure and axis\n    fig, ax = plt.subplots(figsize=(6, 4))\n\n    # Plot histogram\n    ages = treatment_df[\"AGE\"].to_list()\n    ax.hist(ages, bins=15, color=\"#70AD47\", edgecolor=\"black\", alpha=0.7)\n\n    # Set labels\n    ax.set_xlabel(\"Age (years)\")\n    ax.set_ylabel(\"Number of Subjects\")\n\n    # Apply minimal theme styling\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.grid(True, alpha=0.3, linestyle=\"-\", linewidth=0.5)\n    ax.set_axisbelow(True)\n\n    # Save figure\n    plt.savefig(\n        f\"../images/age-histogram-treatment-{i}.png\",\n        dpi=300,\n        bbox_inches=\"tight\"\n    )\n    plt.close()\n</code></pre>"},{"location":"articles/example-figure/#single-figure","title":"Single figure","text":"<pre><code>doc_age = rtf.RTFDocument(\n    rtf_title=rtf.RTFTitle(text=[\"Study Population Demographics\", \"Age Distribution\"]),\n    rtf_figure=rtf.RTFFigure(\n        figures=\"../images/age-histogram-treatment-0.png\", fig_width=6, fig_height=4\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\"Analysis population: All randomized subjects (N=254)\"],\n        as_table=False,  # Required when using RTFFigure\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL dataset\"]),\n)\n\n# Write RTF\ndoc_age.write_rtf(\"example-figure-age.rtf\")\n</code></pre>"},{"location":"articles/example-figure/#multiple-figures-with-elements-on-every-page","title":"Multiple figures with elements on every page","text":"<pre><code># Create RTF document with multiple figures and elements on every page\ndoc_multi_page = rtf.RTFDocument(\n    rtf_page=rtf.RTFPage(\n        page_title=\"all\",  # Show title on all pages\n        page_footnote=\"all\",  # Show footnote on all pages\n        page_source=\"all\",  # Show source on all pages\n    ),\n    rtf_title=rtf.RTFTitle(\n        text=[\"Clinical Study XYZ-123\", \"Age Distribution by Treatment Group\"]\n    ),\n    rtf_figure=rtf.RTFFigure(\n        figures=[\n            \"../images/age-histogram-treatment-0.png\",\n            \"../images/age-histogram-treatment-1.png\",\n            \"../images/age-histogram-treatment-2.png\",\n        ],\n        fig_width=6,\n        fig_height=4,\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Note: Each histogram represents age distribution for one treatment group\"\n        ],\n        as_table=False,  # Required when using RTFFigure\n    ),\n    rtf_source=rtf.RTFSource(\n        text=[\"Source: ADSL dataset, Clinical Database Lock Date: 2023-12-31\"]\n    ),\n)\n\n# Write RTF\ndoc_multi_page.write_rtf(\"example-figure-multipage.rtf\")\n</code></pre>"},{"location":"articles/format-page/","title":"Page format","text":"<p>This article demonstrates how to control component placement in multi-page documents using rtflite.</p> <p>When generating multi-page RTF documents, you may want to control where titles, footnotes, and sources appear. The <code>RTFPage</code> class provides three parameters to control this behavior:</p> <ul> <li><code>page_title</code>: Controls where titles appear (\"first\", \"last\", \"all\")</li> <li><code>page_footnote</code>: Controls where footnotes appear (\"first\", \"last\", \"all\")</li> <li><code>page_source</code>: Controls where sources appear (\"first\", \"last\", \"all\")</li> </ul>"},{"location":"articles/format-page/#default-behavior","title":"Default behavior","text":"<p>Default settings</p> <ul> <li>Titles appear on all pages (<code>page_title=\"all\"</code>)</li> <li>Footnotes appear on the last page only (<code>page_footnote=\"last\"</code>)</li> <li>Sources appear on the last page only (<code>page_source=\"last\"</code>)</li> </ul>"},{"location":"articles/format-page/#examples","title":"Examples","text":""},{"location":"articles/format-page/#basic-setup","title":"Basic setup","text":"<pre><code>from importlib.resources import files\n\nimport polars as pl\n\nfrom rtflite import RTFDocument, RTFFootnote, RTFPage, RTFSource, RTFTitle\n</code></pre> <pre><code># Load the adverse events dataset\ndata_path = files(\"rtflite.data\").joinpath(\"adae.parquet\")\ndf = pl.read_parquet(data_path).head(30)\n</code></pre>"},{"location":"articles/format-page/#example-1-default-behavior","title":"Example 1: default behavior","text":"<pre><code># Default: title on all pages, footnote and source on last page\ndoc_default = RTFDocument(\n    df=df.select(\n        [\"USUBJID\", \"TRTA\", \"AEDECOD\", \"AESEV\", \"AESER\", \"AEREL\"]\n    ),  # Select key columns\n    rtf_page=RTFPage(nrow=15),  # Force pagination with 15 rows per page\n    rtf_title=RTFTitle(text=\"Adverse Events Summary by Treatment\"),\n    rtf_footnote=RTFFootnote(\n        text=\"Abbreviations: USUBJID=Subject ID, TRTA=Treatment, AEDECOD=Adverse Event, AESEV=Severity, AESER=Serious, AEREL=Related\"\n    ),\n    rtf_source=RTFSource(text=\"Source: ADAE Dataset from Clinical Trial Database\"),\n)\n\n# Generate RTF and save to file\ndoc_default.write_rtf(\"format-page-default.rtf\")\n</code></pre>"},{"location":"articles/format-page/#example-2-title-on-first-page-only","title":"Example 2: title on first page only","text":"<pre><code># Title on first page only, footnote and source on last page\ndoc_title_first = RTFDocument(\n    df=df.select([\"USUBJID\", \"TRTA\", \"AEDECOD\", \"AESEV\", \"AESER\", \"AEREL\"]),\n    rtf_page=RTFPage(\n        nrow=15,\n        page_title=\"first\",  # Title on first page only\n        page_footnote=\"last\",  # Footnote on last page (default)\n        page_source=\"last\",  # Source on last page (default)\n    ),\n    rtf_title=RTFTitle(text=\"Adverse Events Summary by Treatment\"),\n    rtf_footnote=RTFFootnote(\n        text=\"Abbreviations: USUBJID=Subject ID, TRTA=Treatment, AEDECOD=Adverse Event, AESEV=Severity, AESER=Serious, AEREL=Related\"\n    ),\n    rtf_source=RTFSource(text=\"Source: ADAE Dataset from Clinical Trial Database\"),\n)\n\n# Save to RTF file\ndoc_title_first.write_rtf(\"format-page-title-first.rtf\")\n</code></pre>"},{"location":"articles/format-page/#example-3-footnote-on-first-page","title":"Example 3: footnote on first page","text":"<pre><code># Title on first page (default), footnote on first page, source on last page\ndoc_footnote_first = RTFDocument(\n    df=df.select([\"USUBJID\", \"TRTA\", \"AEDECOD\", \"AESEV\", \"AESER\", \"AEREL\"]),\n    rtf_page=RTFPage(\n        nrow=15,\n        page_title=\"first\",  # Title on first page\n        page_footnote=\"first\",  # Footnote on first page\n        page_source=\"last\",  # Source on last page (default)\n    ),\n    rtf_title=RTFTitle(text=\"Adverse Events Summary by Treatment\"),\n    rtf_footnote=RTFFootnote(\n        text=\"Abbreviations: USUBJID=Subject ID, TRTA=Treatment, AEDECOD=Adverse Event, AESEV=Severity, AESER=Serious, AEREL=Related\"\n    ),\n    rtf_source=RTFSource(text=\"Source: ADAE Dataset from Clinical Trial Database\"),\n)\n\n# Save to RTF file\ndoc_footnote_first.write_rtf(\"format-page-footnote-first.rtf\")\n</code></pre>"},{"location":"articles/format-page/#example-4-all-components-on-all-pages","title":"Example 4: all components on all pages","text":"<pre><code># All components on all pages\ndoc_all_pages = RTFDocument(\n    df=df.select([\"USUBJID\", \"TRTA\", \"AEDECOD\", \"AESEV\", \"AESER\", \"AEREL\"]),\n    rtf_page=RTFPage(\n        nrow=15,\n        page_title=\"all\",  # Title on all pages\n        page_footnote=\"all\",  # Footnote on all pages\n        page_source=\"all\",  # Source on all pages\n    ),\n    rtf_title=RTFTitle(text=\"Adverse Events Summary by Treatment\"),\n    rtf_footnote=RTFFootnote(\n        text=\"Abbreviations: USUBJID=Subject ID, TRTA=Treatment, AEDECOD=Adverse Event, AESEV=Severity, AESER=Serious, AEREL=Related\"\n    ),\n    rtf_source=RTFSource(text=\"Source: ADAE Dataset from Clinical Trial Database\"),\n)\n\n# Save to RTF file\ndoc_all_pages.write_rtf(\"format-page-all-pages.rtf\")\n</code></pre>"},{"location":"articles/format-page/#example-5-custom-combination","title":"Example 5: custom combination","text":"<pre><code># Custom combination: title everywhere, footnote on first page, source on last page\ndoc_custom = RTFDocument(\n    df=df.select([\"USUBJID\", \"TRTA\", \"AEDECOD\", \"AESEV\", \"AESER\", \"AEREL\"]),\n    rtf_page=RTFPage(\n        nrow=15,\n        page_title=\"all\",  # Title on all pages\n        page_footnote=\"first\",  # Footnote on first page only\n        page_source=\"last\",  # Source on last page only\n    ),\n    rtf_title=RTFTitle(text=\"Adverse Events Summary by Treatment\"),\n    rtf_footnote=RTFFootnote(\n        text=\"Abbreviations: USUBJID=Subject ID, TRTA=Treatment, AEDECOD=Adverse Event, AESEV=Severity, AESER=Serious, AEREL=Related\"\n    ),\n    rtf_source=RTFSource(text=\"Source: ADAE Dataset from Clinical Trial Database\"),\n)\n\n# Save to RTF file\ndoc_custom.write_rtf(\"format-page-custom.rtf\")\n</code></pre>"},{"location":"articles/format-row/","title":"Row format","text":"<p>This article demonstrates row-level formatting in rtflite: borders, cell alignment, column widths, and text formatting to create professional tables.</p>"},{"location":"articles/format-row/#overview","title":"Overview","text":"<p>Row-level formatting provides granular control over table appearance:</p> <ul> <li>Border styles (single, double, thick)</li> <li>Column width control with relative sizing</li> </ul>"},{"location":"articles/format-row/#imports","title":"Imports","text":"<pre><code>import polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/format-row/#border-styles","title":"Border styles","text":"<p>PDF conversion limitation</p> <p>Prefer reviewing the <code>.rtf</code> output. Some border styles may not render perfectly in PDF due to LibreOffice conversion quirks.</p> <p>Demonstrate different border types:</p> <pre><code># Create border demonstration data from BORDER_CODES\nborder_data = [\n    [border_type, f\"Example of {border_type or 'no'} border\"]\n    for border_type in rtf.attributes.BORDER_CODES.keys()\n]\n\ndf_borders = pl.DataFrame(\n    border_data, schema=[\"border_type\", \"description\"], orient=\"row\"\n)\n\n# Apply different border styles to each row\ndoc_borders = rtf.RTFDocument(\n    df=df_borders,\n    rtf_body=rtf.RTFBody(\n        border_bottom=tuple(rtf.attributes.BORDER_CODES.keys()),\n    ),\n)\n\ndoc_borders.write_rtf(\"row-border-styles.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/format-row/#column-widths","title":"Column widths","text":"<p>Control relative column widths using <code>col_rel_width</code>:</p> <pre><code># Create width demonstration data\nwidth_demo = [\n    [\"Narrow\", \"Standard Width\", \"Wide Column\"],\n    [\"1.0\", \"2.0\", \"3.0\"],\n    [\"Small\", \"Medium text content\", \"Much wider column for longer text\"],\n]\n\ndf_widths = pl.DataFrame(width_demo, schema=[\"narrow\", \"standard\", \"wide\"])\n\n# Apply different column width ratios\ndoc_widths = rtf.RTFDocument(\n    df=df_widths,\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[1.0, 2.0, 3.0],  # Relative width ratios\n    ),\n)\n\ndoc_widths.write_rtf(\"row-column-widths.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/format-text/","title":"Text format","text":"<p>This article demonstrates advanced text formatting capabilities in rtflite: fonts, colors, alignment, indentation, special characters, and common patterns for clinical documentation.</p>"},{"location":"articles/format-text/#overview","title":"Overview","text":"<p>Advanced text formatting is essential for creating production-ready clinical documents that meet regulatory standards.</p> <p>Key formatting features include:</p> <ul> <li>Text format styles (bold, italic, underline, superscript, subscript)</li> <li>Font sizes and alignment options (left, center, right, justified)</li> <li>Text colors and background colors</li> <li>Indentation and spacing control</li> <li>Special symbols and mathematical notation</li> <li>Inline formatting combinations</li> </ul>"},{"location":"articles/format-text/#imports","title":"Imports","text":"<pre><code>import polars as pl\n\nimport rtflite as rtf\n</code></pre>"},{"location":"articles/format-text/#text-style","title":"Text style","text":"<p>Demonstrate core text formatting options:</p> <pre><code># Create formatting demonstration data\nformat_demo = [\n    [\"Normal\", \"\", \"Regular text\", \"Default body text\"],\n    [\"Bold\", \"b\", \"Bold text\", \"Emphasis and headers\"],\n    [\"Italic\", \"i\", \"Italic text\", \"Special terms, notes\"],\n    [\"Bold Italic\", \"bi\", \"Bold italic text\", \"Maximum emphasis\"],\n    [\"Underline\", \"u\", \"Underlined text\", \"Highlight important items\"],\n    [\"Strikethrough\", \"s\", \"Crossed out\", \"Deprecated content\"],\n]\n\ndf_formats = pl.DataFrame(\n    format_demo, schema=[\"format_type\", \"code\", \"example\", \"usage\"], orient=\"row\"\n)\nprint(df_formats)\n</code></pre> <pre><code>shape: (6, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 format_type   \u2506 code \u2506 example          \u2506 usage                     \u2502\n\u2502 ---           \u2506 ---  \u2506 ---              \u2506 ---                       \u2502\n\u2502 str           \u2506 str  \u2506 str              \u2506 str                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Normal        \u2506      \u2506 Regular text     \u2506 Default body text         \u2502\n\u2502 Bold          \u2506 b    \u2506 Bold text        \u2506 Emphasis and headers      \u2502\n\u2502 Italic        \u2506 i    \u2506 Italic text      \u2506 Special terms, notes      \u2502\n\u2502 Bold Italic   \u2506 bi   \u2506 Bold italic text \u2506 Maximum emphasis          \u2502\n\u2502 Underline     \u2506 u    \u2506 Underlined text  \u2506 Highlight important items \u2502\n\u2502 Strikethrough \u2506 s    \u2506 Crossed out      \u2506 Deprecated content        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Apply text formatting using a column-based approach:</p> <p>Tip</p> <p>Use tuples <code>()</code> to specify per-row attributes.</p> <pre><code># Apply text formatting by row\ndoc_formats = rtf.RTFDocument(\n    df=df_formats,\n    rtf_body=rtf.RTFBody(\n        text_format=(\"\", \"b\", \"i\", \"bi\", \"u\", \"s\"),\n    ),\n)\n\ndoc_formats.write_rtf(\"text-format-styles.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/format-text/#font-size-and-alignment","title":"Font size and alignment","text":"<p>Demonstrate font size variations and text alignment:</p> <pre><code># Create font size and alignment data\nfont_align_demo = [\n    [\"Left\", \"12pt\", \"l\"],\n    [\"Center\", \"14pt\", \"c\"],\n    [\"Right\", \"10pt\", \"r\"],\n    [\"Justified\", \"11pt\", \"j\"],\n]\n\ndf_font_align = pl.DataFrame(\n    font_align_demo, schema=[\"alignment\", \"size\", \"text_justification\"], orient=\"row\"\n)\nprint(df_font_align)\n</code></pre> <pre><code>shape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 alignment \u2506 size \u2506 text_justification \u2502\n\u2502 ---       \u2506 ---  \u2506 ---                \u2502\n\u2502 str       \u2506 str  \u2506 str                \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Left      \u2506 12pt \u2506 l                  \u2502\n\u2502 Center    \u2506 14pt \u2506 c                  \u2502\n\u2502 Right     \u2506 10pt \u2506 r                  \u2502\n\u2502 Justified \u2506 11pt \u2506 j                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Apply font sizes and alignment\ndoc_font_align = rtf.RTFDocument(\n    df=df_font_align,\n    rtf_body=rtf.RTFBody(\n        text_justification=(\"l\", \"c\", \"r\", \"j\"),\n        text_font_size=(12, 14, 10, 11),\n    ),\n)\n\ndoc_font_align.write_rtf(\"text-font-size-alignment.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/format-text/#text-color","title":"Text color","text":"<p>Demonstrate text and background color applications:</p> <pre><code># Create color demonstration data\ncolor_demo = [\n    [\"Normal\", \"Black text on white\"],\n    [\"Warning\", \"Orange text for caution\"],\n    [\"Error\", \"Red text for alerts\"],\n    [\"Info\", \"Blue text for information\"],\n]\n\ndf_colors = pl.DataFrame(color_demo, schema=[\"status\", \"description\"], orient=\"row\")\nprint(df_colors)\n</code></pre> <pre><code>shape: (4, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 status  \u2506 description               \u2502\n\u2502 ---     \u2506 ---                       \u2502\n\u2502 str     \u2506 str                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Normal  \u2506 Black text on white       \u2502\n\u2502 Warning \u2506 Orange text for caution   \u2502\n\u2502 Error   \u2506 Red text for alerts       \u2502\n\u2502 Info    \u2506 Blue text for information \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Apply text colors\ndoc_colors = rtf.RTFDocument(\n    df=df_colors,\n    rtf_body=rtf.RTFBody(\n        text_color=(\"black\", \"orange\", \"red\", \"blue\"),\n    ),\n)\n\ndoc_colors.write_rtf(\"text-color.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/format-text/#indentation","title":"Indentation","text":"<p>Show indentation options for hierarchical content (values are in twips):</p> <pre><code># Create indentation demonstration data\nindent_demo = [\n    [\"Main section\", \"No indent\"],\n    [\"First level subsection\", \"300 twips indent\"],\n    [\"Second level detail\", \"600 twips indent\"],\n    [\"Third level item\", \"900 twips indent\"],\n]\n\ndf_indent = pl.DataFrame(indent_demo, schema=[\"level\", \"description\"], orient=\"row\")\nprint(df_indent)\n</code></pre> <pre><code>shape: (4, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 level                  \u2506 description      \u2502\n\u2502 ---                    \u2506 ---              \u2502\n\u2502 str                    \u2506 str              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Main section           \u2506 No indent        \u2502\n\u2502 First level subsection \u2506 300 twips indent \u2502\n\u2502 Second level detail    \u2506 600 twips indent \u2502\n\u2502 Third level item       \u2506 900 twips indent \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># Apply indentation levels\ndoc_indent = rtf.RTFDocument(\n    df=df_indent,\n    rtf_body=rtf.RTFBody(\n        text_justification=\"l\",\n        text_indent_first=(0, 300, 600, 900),\n    ),\n)\n\ndoc_indent.write_rtf(\"text-indentation.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/pagination/","title":"Pagination","text":"<p>This document summarizes the pagination feature implementation in rtflite, designed to match r2rtf behavior for automatic table splitting across multiple pages.</p>"},{"location":"articles/pagination/#overview","title":"Overview","text":"<p>The pagination feature automatically splits large tables across multiple RTF pages when the content exceeds the specified number of rows per page (<code>nrow</code>). This ensures tables are properly formatted for regulatory submissions and professional documents.</p>"},{"location":"articles/pagination/#key-features","title":"Key features","text":""},{"location":"articles/pagination/#automatic-pagination","title":"Automatic pagination","text":"<ul> <li>Automatic triggering: Pagination activates when table content exceeds <code>nrow</code> limit</li> <li>Default <code>nrow</code> values:</li> <li>Portrait orientation: 40 rows per page</li> <li>Landscape orientation: 24 rows per page</li> <li>No manual configuration required: Users don't need to specify <code>nrow</code> explicitly</li> </ul>"},{"location":"articles/pagination/#page-break-handling","title":"Page break handling","text":"<ul> <li>Proper RTF encoding: Uses <code>{\\pard\\fs2\\par}\\page{\\pard\\fs2\\par}</code> format</li> <li>Page setup inclusion: Each new page includes paper size and margin settings</li> <li>Correct positioning: Page breaks occur right before column headers of next page</li> </ul>"},{"location":"articles/pagination/#border-management","title":"Border management","text":"<p>Three-tier border hierarchy</p> <p>The pagination system implements a three-tier border hierarchy matching r2rtf design:</p> <ol> <li><code>rtf_page.border_first/border_last</code>: Controls borders for the entire table</li> <li><code>border_first</code>: Applied to first row of first page (default: \"double\")</li> <li> <p><code>border_last</code>: Applied to last row of last page (default: \"double\")</p> </li> <li> <p><code>rtf_body.border_first/border_last</code>: Controls borders for each page</p> </li> <li><code>border_first</code>: Applied to first row of each non-first page (default: \"single\")</li> <li> <p><code>border_last</code>: Applied to last row of each non-last page (default: \"single\")</p> </li> <li> <p><code>rtf_body.border_top/bottom/left/right</code>: Controls borders for individual cells</p> </li> <li>Standard cell borders maintained throughout the table</li> </ol>"},{"location":"articles/pagination/#column-header-repetition","title":"Column header repetition","text":"<ul> <li>Automatic repetition: Column headers repeat on each page by default</li> <li>Proper border application: Column headers receive appropriate page-level borders</li> <li>Multi-level headers: Supports complex multi-row column header structures</li> </ul>"},{"location":"articles/pagination/#implementation-details","title":"Implementation details","text":""},{"location":"articles/pagination/#core-components","title":"Core components","text":""},{"location":"articles/pagination/#1-pagination-detection","title":"1. Pagination detection","text":"<pre><code>def _needs_pagination(self) -&gt; bool:\n    \"\"\"Check if document needs pagination based on content size and page limits\"\"\"\n    # Creates pagination instance to calculate rows needed\n    # Returns True if total_rows &gt; nrow\n</code></pre>"},{"location":"articles/pagination/#2-page-break-generation","title":"2. Page break generation","text":"<pre><code>def _rtf_page_break_encode(self) -&gt; str:\n    \"\"\"Generate proper RTF page break sequence matching r2rtf format\"\"\"\n    # Returns: {\\pard\\fs2\\par}\\page{\\pard\\fs2\\par} + page setup\n</code></pre>"},{"location":"articles/pagination/#3-border-logic-application","title":"3. Border logic application","text":"<pre><code>def _apply_pagination_borders(self, rtf_attrs, page_info, total_pages) -&gt; TableAttributes:\n    \"\"\"Apply proper borders for paginated context following r2rtf design\"\"\"\n    # Implements the three-tier border hierarchy\n</code></pre>"},{"location":"articles/pagination/#4-content-distribution","title":"4. Content distribution","text":"<ul> <li>Uses <code>RTFPagination</code>, <code>PageBreakCalculator</code>, and <code>ContentDistributor</code> classes</li> <li>Handles page-by grouping and content splitting</li> <li>Maintains data integrity across page boundaries</li> </ul>"},{"location":"articles/pagination/#rtf-structure","title":"RTF structure","text":"<p>Each paginated document follows this structure:</p> <pre><code>[Page 1]\n{\\rtf1\\ansi...}           # RTF header\n{\\fonttbl...}             # Font table\n\\paperw...\\paperh...      # Page setup\n\\margl...\\margr...        # Margins\n[Title content]           # Optional title\n[Column headers]          # With page-level borders\n[Table rows 1-nrow]       # Data content\n\n[Page 2+]\n{\\pard\\fs2\\par}\\page{\\pard\\fs2\\par}  # Page break\n\\paperw...\\paperh...      # Page setup (repeated)\n\\margl...\\margr...        # Margins (repeated)\n[Title content]           # Optional (based on page_title setting)\n[Column headers]          # Repeated with appropriate borders\n[Table rows nrow+1-2*nrow] # Continued data content\n...\n</code></pre>"},{"location":"articles/pagination/#usage-examples","title":"Usage examples","text":""},{"location":"articles/pagination/#basic-automatic-pagination","title":"Basic automatic pagination","text":"<pre><code>import rtflite as rtf\nimport polars as pl\n\n# Large dataset (&gt;40 rows for portrait)\ndf = pl.DataFrame({\"col1\": range(100), \"col2\": range(100, 200)})\n\ndoc = rtf.RTFDocument(\n    df=df,\n    # rtf_page uses defaults: portrait, nrow=40\n    rtf_column_header=[\n        rtf.RTFColumnHeader(text=[\"Column 1\", \"Column 2\"])\n    ],\n    rtf_body=rtf.RTFBody()\n)\n\ndoc.write_rtf(\"paginated_table.rtf\")  # Automatically creates ~3 pages\n</code></pre>"},{"location":"articles/pagination/#custom-page-settings","title":"Custom page settings","text":"<pre><code>doc = rtf.RTFDocument(\n    df=df,\n    rtf_page=rtf.RTFPage(\n        orientation=\"landscape\",  # nrow=24 by default\n        border_first=\"double\",    # Entire table start border\n        border_last=\"double\"      # Entire table end border\n    ),\n    rtf_body=rtf.RTFBody(\n        border_first=[[\"single\"]],  # Each page start border\n        border_last=[[\"single\"]],   # Each page end border\n    )\n)\n</code></pre>"},{"location":"articles/pagination/#forced-pagination","title":"Forced pagination","text":"<pre><code>doc = rtf.RTFDocument(\n    df=small_df,  # Even small datasets can be paginated\n    rtf_page=rtf.RTFPage(nrow=10),  # Force 10 rows per page\n    rtf_body=rtf.RTFBody()\n)\n</code></pre>"},{"location":"articles/pagination/#technical-architecture","title":"Technical architecture","text":""},{"location":"articles/pagination/#class-relationships","title":"Class relationships","text":"<pre><code>RTFDocument\n|-- _needs_pagination() -&gt; bool\n|-- _create_pagination_instance() -&gt; (RTFPagination, ContentDistributor)\n|-- _rtf_page_break_encode() -&gt; str\n|-- _apply_pagination_borders() -&gt; TableAttributes\n|-- _rtf_encode_paginated() -&gt; str  # Main paginated encoding\n+-- _rtf_body_encode_paginated() -&gt; List[str]  # Body-only paginated encoding\n</code></pre>"},{"location":"articles/pagination/#border-application-flow","title":"Border application flow","text":"<ol> <li>Page content distribution: Content split across pages</li> <li>Border calculation: Determine appropriate borders for each page position</li> <li>Column header processing: Apply page-level borders to headers</li> <li>Body content processing: Apply pagination borders to table body</li> <li>RTF generation: Encode with proper border codes</li> </ol>"},{"location":"articles/pagination/#rtf-border-codes","title":"RTF border codes","text":"Border Type RTF Code Usage Single <code>\\brdrs</code> Page boundaries, regular cells Double <code>\\brdrdb</code> Table start/end boundaries None <code>\"\"</code> No border"},{"location":"articles/pagination/#configuration-options","title":"Configuration options","text":""},{"location":"articles/pagination/#rtfpage-settings","title":"RTFPage settings","text":"<ul> <li><code>orientation</code>: \"portrait\" or \"landscape\"</li> <li><code>nrow</code>: Rows per page (auto-calculated if not specified)</li> <li><code>border_first</code>: Border style for entire table start</li> <li><code>border_last</code>: Border style for entire table end</li> <li><code>page_title</code>: \"all\", \"first\", or \"last\"</li> <li><code>page_footnote</code>: \"all\", \"first\", or \"last\"</li> <li><code>page_source</code>: \"all\", \"first\", or \"last\"</li> </ul>"},{"location":"articles/pagination/#rtfbody-settings","title":"RTFBody settings","text":"<ul> <li><code>border_first</code>: Border style for each page start</li> <li><code>border_last</code>: Border style for each page end</li> <li><code>border_top/bottom/left/right</code>: Individual cell borders</li> <li><code>pageby_header</code>: Whether to repeat column headers (default: True)</li> </ul>"},{"location":"articles/pagination/#known-limitations-and-future-enhancements","title":"Known limitations and future enhancements","text":""},{"location":"articles/pagination/#current-limitations","title":"Current limitations","text":"<ol> <li>Fixed row calculation: Pagination based on row count, not actual content height</li> <li>Simple page breaks: No widow/orphan control</li> <li>Limited page-by support: Basic grouping functionality</li> </ol>"},{"location":"articles/pagination/#potential-enhancements","title":"Potential enhancements","text":"<ol> <li>Content-aware pagination: Calculate page breaks based on actual content height</li> <li>Advanced page-by features: More sophisticated grouping and page break controls</li> <li>Widow/orphan control: Prevent isolated rows at page boundaries</li> <li>Custom page break locations: Allow manual page break insertion</li> <li>Page numbering: Add automatic page number generation</li> <li>Conditional formatting: Page-specific formatting rules</li> </ol>"},{"location":"articles/quickstart/","title":"Quick start guide to rtflite","text":""},{"location":"articles/quickstart/#overview","title":"Overview","text":"<p>rtflite is a Python package for creating production-ready tables and figures in RTF format. The package is designed to:</p> <ul> <li>Provide simple Python classes that map to table elements   (title, headers, body, footnotes) for intuitive table construction.</li> <li>Offer a canonical Python API with a clear, composable interface.</li> <li>Focus exclusively on table formatting and layout,   leaving data manipulation to dataframe libraries like polars or pandas.</li> <li>Minimize external dependencies for maximum portability and reliability.</li> </ul> <p>Creating an RTF table involves three steps:</p> <ul> <li>Design the desired table layout and structure.</li> <li>Configure the appropriate rtflite components.</li> <li>Generate and save the RTF document.</li> </ul> <p>This guide introduces rtflite's core components and demonstrates how to turn dataframes into Tables, Listings, and Figures (TLFs) for clinical reporting.</p>"},{"location":"articles/quickstart/#data-adverse-events","title":"Data: adverse events","text":"<p>To explore the RTF generation capabilities in rtflite, we will use the dataset <code>adae.parquet</code>. This dataset contains adverse events (AE) information from a clinical trial.</p> <p>Below is the meaning of relevant variables.</p> <ul> <li><code>USUBJID</code>: Unique Subject Identifier</li> <li><code>TRTA</code>: Actual Treatment</li> <li><code>AEDECOD</code>: Dictionary-Derived Term</li> </ul> <pre><code>from importlib.resources import files\n\nimport polars as pl\n\nimport rtflite as rtf\n</code></pre> <pre><code># Load adverse events data\ndata_path = files(\"rtflite.data\").joinpath(\"adae.parquet\")\ndf = pl.read_parquet(data_path)\n\ndf.select([\"USUBJID\", \"TRTA\", \"AEDECOD\"]).head(4)\n</code></pre>"},{"location":"articles/quickstart/#table-ready-data","title":"Table-ready data","text":"<p>We use polars for data manipulation to create a dataframe with the information we want to render in an RTF table.</p> <p>Note</p> <p>Other dataframe packages can also be used for the same purpose.</p> <p>In this AE example, we provide the number of subjects with each type of AE by treatment group.</p> <pre><code>tbl = (\n    df.group_by([\"TRTA\", \"AEDECOD\"])\n    .agg(pl.len().alias(\"n\"))\n    .sort(\"TRTA\")\n    .pivot(values=\"n\", index=\"AEDECOD\", on=\"TRTA\")\n    .fill_null(0)\n    .sort(\"AEDECOD\")  # Sort by adverse event name to match R output\n)\nprint(tbl.head(4))\n</code></pre> <pre><code>shape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 AEDECOD              \u2506 Placebo \u2506 Xanomeline High Dose \u2506 Xanomeline Low Dose \u2502\n\u2502 ---                  \u2506 ---     \u2506 ---                  \u2506 ---                 \u2502\n\u2502 str                  \u2506 u32     \u2506 u32                  \u2506 u32                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 ABDOMINAL DISCOMFORT \u2506 0       \u2506 1                    \u2506 0                   \u2502\n\u2502 ABDOMINAL PAIN       \u2506 1       \u2506 2                    \u2506 3                   \u2502\n\u2502 ACROCHORDON EXCISION \u2506 0       \u2506 1                    \u2506 0                   \u2502\n\u2502 ACTINIC KERATOSIS    \u2506 0       \u2506 1                    \u2506 0                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"articles/quickstart/#table-component-classes","title":"Table component classes","text":"<p>rtflite provides dedicated classes for each table component. Commonly used classes include:</p> <ul> <li><code>RTFPage</code>: RTF page information (orientation, margins, pagination).</li> <li><code>RTFPageHeader</code>: Page headers with page numbering (compatible with r2rtf).</li> <li><code>RTFPageFooter</code>: Page footers for attribution and notices.</li> <li><code>RTFTitle</code>: RTF title information.</li> <li><code>RTFColumnHeader</code>: RTF column header information.</li> <li><code>RTFBody</code>: RTF table body information.</li> <li><code>RTFFootnote</code>: RTF footnote information.</li> <li><code>RTFSource</code>: RTF data source information.</li> </ul> <p>These component classes work together to build complete RTF documents. A full list of all classes and their parameters can be found in the API reference.</p>"},{"location":"articles/quickstart/#simple-example","title":"Simple example","text":"<p>A minimal example below illustrates how to combine components to create an RTF table.</p> <ul> <li><code>RTFBody()</code> defines table body layout.</li> <li><code>RTFDocument()</code> transfers table layout information into RTF syntax.</li> <li><code>write_rtf()</code> saves encoded RTF into a <code>.rtf</code> file.</li> </ul> <pre><code># Create simple RTF document\ndoc = rtf.RTFDocument(\n    df=tbl.head(6),\n    rtf_body=rtf.RTFBody(),  # Step 1: Add table attributes\n)\n\n# Step 2 &amp; 3: Convert to RTF and write to file\ndoc.write_rtf(\"intro-ae1.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#column-width","title":"Column width","text":"<p>If we want to adjust the width of each column to provide more space to the first column, this can be achieved by updating <code>col_rel_width</code> in <code>RTFBody</code>.</p> <p>The input of <code>col_rel_width</code> is a list with same length for number of columns. This argument defines the relative length of each column within a pre-defined total column width.</p> <p>In this example, the defined relative width is 3:2:2:2. Only the ratio of <code>col_rel_width</code> is used. Therefore it is equivalent to use <code>col_rel_width = [6,4,4,4]</code> or <code>col_rel_width = [1.5,1,1,1]</code>.</p> <pre><code># Create RTF document with custom column widths\ndoc = rtf.RTFDocument(\n    df=tbl.head(6),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3, 2, 2, 2]  # Define relative width\n    ),\n)\n\ndoc.write_rtf(\"intro-ae2.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#column-headers","title":"Column headers","text":"<p>In <code>RTFColumnHeader</code>, the <code>text</code> argument provides the column header content as a list of strings.</p> <pre><code># Create RTF document with column headers\ndoc = rtf.RTFDocument(\n    df=tbl.head(6),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\",\n            \"Xanomeline High Dose\",\n            \"Xanomeline Low Dose\",\n        ],\n    ),\n    rtf_body=rtf.RTFBody(col_rel_width=[3, 2, 2, 2]),\n)\n\ndoc.write_rtf(\"intro-ae3.rtf\")\n</code></pre> <p></p> <p></p> <p>We also allow column headers be displayed in multiple lines. If an empty column name is needed for a column, you can insert an empty string. For example, <code>[\"name 1\", \"\", \"name 3\"]</code>.</p> <p>In <code>RTFColumnHeader</code>, the <code>col_rel_width</code> can be used to align column header with different number of columns.</p> <p>By using <code>RTFColumnHeader</code> with <code>col_rel_width</code>, one can customize complicated column headers. If there are multiple pages, column header will repeat at each page by default.</p> <pre><code># Create RTF document with multi-line column headers\ndoc = rtf.RTFDocument(\n    df=tbl.head(50),\n    rtf_page=rtf.RTFPage(nrow=15),\n    rtf_column_header=[\n        rtf.RTFColumnHeader(text=[\" \", \"Treatment\"], col_rel_width=[3, 3]),\n        rtf.RTFColumnHeader(\n            text=[\n                \"Adverse Events\",\n                \"Placebo\",\n                \"Xanomeline High Dose\",\n                \"Xanomeline Low Dose\",\n            ],\n            col_rel_width=[3, 1, 1, 1],\n        ),\n    ],\n    rtf_body=rtf.RTFBody(col_rel_width=[3, 1, 1, 1]),\n)\n\ndoc.write_rtf(\"intro-ae4.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#titles-footnotes-and-data-source","title":"Titles, footnotes, and data source","text":"<p>RTF documents can include additional components to provide context and documentation:</p> <ul> <li><code>RTFTitle</code>: Add document titles and subtitles</li> <li><code>RTFFootnote</code>: Add explanatory footnotes</li> <li><code>RTFSource</code>: Add data source attribution</li> </ul> <pre><code># Create RTF document with titles, footnotes, and source\ndoc = rtf.RTFDocument(\n    df=tbl.head(15),\n    rtf_title=rtf.RTFTitle(\n        text=[\"Summary of Adverse Events by Treatment Group\", \"Safety Analysis Set\"]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\\\\line (N=86)\",\n            \"Xanomeline High Dose\\\\line (N=84)\",\n            \"Xanomeline Low Dose\\\\line (N=84)\",\n        ],\n    ),\n    rtf_body=rtf.RTFBody(col_rel_width=[3, 2, 2, 2]),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Adverse events are coded using MedDRA version 25.0.\",\n            \"Events are sorted alphabetically by preferred term.\",\n        ]\n    ),\n    rtf_source=rtf.RTFSource(text=\"Source: ADAE dataset, Data cutoff: 01JAN2023\"),\n)\n\ndoc.write_rtf(\"intro-ae5.rtf\")\n</code></pre> <p></p> <p></p> <p>Note the use of <code>\\\\line</code> in column headers to create line breaks within cells.</p>"},{"location":"articles/quickstart/#text-formatting-and-alignment","title":"Text formatting and alignment","text":"<p>rtflite supports various text formatting options:</p> <ul> <li>Text formatting: Bold (<code>b</code>), italic (<code>i</code>), underline (<code>u</code>), strikethrough (<code>s</code>)</li> <li>Text alignment: Left (<code>l</code>), center (<code>c</code>), right (<code>r</code>), justify (<code>j</code>)</li> <li>Font properties: Font size, font family</li> </ul> <pre><code># Create RTF document with text formatting and alignment\ndoc = rtf.RTFDocument(\n    df=tbl.head(10),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\",\n            \"Xanomeline High Dose\",\n            \"Xanomeline Low Dose\",\n        ],\n        text_format=\"b\",  # Bold headers\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3, 1, 1, 1],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n)\n\ndoc.write_rtf(\"intro-ae6.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#text-conversion-control","title":"Text conversion control","text":"<p>rtflite supports LaTeX-style text conversion for mathematical symbols and formatting. By default, text conversion is enabled for titles and data content, but can be controlled with the <code>text_convert</code> parameter.</p>"},{"location":"articles/quickstart/#text-conversion-examples","title":"Text conversion examples","text":"<p>When <code>text_convert = True</code> (default for titles and data): - <code>\\\\alpha</code> converts to \\u03b1 (Greek alpha) - <code>\\\\beta</code> converts to \\u03b2 (Greek beta) - <code>a_b</code> converts to subscript format (a subscript b)</p> <p>When <code>text_convert = False</code>: - LaTeX patterns like <code>a_b</code> remain unchanged as literal text - Underscores stay as underscores: <code>a_b</code> displays as <code>a_b</code></p> <pre><code># Example showing text_convert behavior with subscript patterns\n# Create example data with underscore patterns\ndata_with_underscores = pl.DataFrame(\n    {\n        \"Parameter\": [\"x_max\", \"y_min\", \"z_avg\", \"a_b_ratio\"],\n        \"Value\": [15.2, 8.7, 12.1, 0.85],\n        \"Unit\": [\"mg/L\", \"cm\", \"C\", \"ratio\"],\n    }\n)\n</code></pre> <pre><code>doc_converted = rtf.RTFDocument(\n    df=data_with_underscores,\n    rtf_title=rtf.RTFTitle(text=\"Study Parameters with Text Conversion Enabled\"),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"Parameter\", \"Value\", \"Unit\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[2, 1, 1],\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=\"Note: Underscores x_max and y_min in footnote as is\",\n        text_convert=False,  # Keep footnote text as-is\n    ),\n)\n\ndoc_converted.write_rtf(\"text-convert.rtf\")\n</code></pre> <p></p> <p></p> <p>Key points about text conversion</p> <ul> <li>Default behavior: <code>text_convert = True</code> for all components   (titles, data, footnotes, sources).</li> <li>Underscore patterns: <code>a_b</code> becomes subscript when conversion is enabled.</li> <li>LaTeX symbols: <code>\\\\alpha</code>, <code>\\\\beta</code>, etc. convert to Unicode symbols.</li> <li>Control per component: Each RTF component can have independent   conversion settings.</li> <li>Performance: Disabling conversion can improve performance for large   tables with no LaTeX content.</li> </ul>"},{"location":"articles/quickstart/#border-customization","title":"Border customization","text":"<p>Table borders can be customized extensively:</p> <ul> <li>Border styles: <code>single</code>, <code>double</code>, <code>thick</code>, <code>dotted</code>, <code>dashed</code></li> <li>Border sides: <code>border_top</code>, <code>border_bottom</code>, <code>border_left</code>, <code>border_right</code></li> <li>Page borders: <code>border_first</code>, <code>border_last</code> for first/last rows across pages</li> </ul> <pre><code># Create RTF document with custom borders\ndoc = rtf.RTFDocument(\n    df=tbl.head(8),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\",\n            \"Xanomeline High Dose\",\n            \"Xanomeline Low Dose\",\n        ],\n        border_bottom=[\"single\", \"double\", \"single\", \"single\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3, 2, 2, 2],\n        border_left=[\"single\", \"\", \"\", \"\"],\n    ),\n)\n\ndoc.write_rtf(\"intro-ae7.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#page-headers-and-footers","title":"Page headers and footers","text":"<p>RTF documents can include page headers and footers that appear on every page, positioned outside the main content area (compatible with r2rtf):</p> <ul> <li><code>RTFPageHeader</code>: Add headers with page numbering and custom text</li> <li><code>RTFPageFooter</code>: Add footers with attribution or confidentiality notices</li> </ul> <pre><code># Create RTF document with page headers and footers\ndoc = rtf.RTFDocument(\n    df=tbl.head(15),\n    rtf_page_header=rtf.RTFPageHeader(\n        # Default: \"Page \\chpgn of {\\field{\\*\\fldinst NUMPAGES }}\"\n        # Uses r2rtf-compatible RTF field codes\n    ),\n    rtf_page_footer=rtf.RTFPageFooter(text=\"Confidential - Clinical Study Report\"),\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Summary of Adverse Events by Treatment Group\",\n            \"With Page Headers and Footers\",\n        ]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo (N=86)\",\n            \"Xanomeline High Dose (N=84)\",\n            \"Xanomeline Low Dose (N=84)\",\n        ],\n    ),\n    rtf_body=rtf.RTFBody(col_rel_width=[3, 2, 2, 2]),\n)\n\ndoc.write_rtf(\"intro-ae8.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#custom-header-and-footer-formatting","title":"Custom header and footer formatting","text":"<p>Headers and footers support full text formatting including custom alignment, font sizes, and styling:</p> <pre><code># Create RTF document with custom formatted headers and footers\ndoc = rtf.RTFDocument(\n    df=tbl.head(10),\n    rtf_page_header=rtf.RTFPageHeader(\n        text=\"Study XYZ-123 | Page \\\\chpgn\",\n        text_font_size=10,\n        text_justification=\"c\",  # Center aligned\n        text_format=\"b\",  # Bold\n    ),\n    rtf_page_footer=rtf.RTFPageFooter(\n        text=[\"Company Confidential\"],\n        text_font_size=8,\n        text_justification=\"l\",  # Left aligned\n    ),\n    rtf_title=rtf.RTFTitle(text=\"Adverse Events with Custom Headers/Footers\"),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\",\n            \"Xanomeline High Dose\",\n            \"Xanomeline Low Dose\",\n        ],\n    ),\n    rtf_body=rtf.RTFBody(col_rel_width=[3, 2, 2, 2]),\n)\n\ndoc.write_rtf(\"intro-ae8b.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#page-layout-and-orientation","title":"Page layout and orientation","text":"<p><code>RTFPage</code> provides control over page layout:</p> <ul> <li>Orientation: <code>portrait</code> or <code>landscape</code></li> <li>Page size: Custom width and height</li> <li>Margins: Left, right, top, bottom, header, footer margins</li> <li>Rows per page: Control pagination with <code>nrow</code></li> </ul> <pre><code># Create RTF document with landscape layout\ndoc = rtf.RTFDocument(\n    df=tbl.head(20),\n    rtf_page=rtf.RTFPage(\n        orientation=\"landscape\",  # Landscape for wider tables\n        nrow=10,\n        border_first=\"dashed\",  # Dash border for first/last pages\n        border_last=\"dashed\",\n    ),\n    rtf_title=rtf.RTFTitle(text=\"Adverse Events Summary - Landscape Layout\"),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo (N=86)\",\n            \"Xanomeline High Dose (N=84)\",\n            \"Xanomeline Low Dose (N=84)\",\n        ],\n    ),\n    rtf_body=rtf.RTFBody(col_rel_width=[4, 2, 2, 2]),\n)\n\ndoc.write_rtf(\"intro-ae10.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"articles/quickstart/#cell-level-formatting","title":"Cell-level formatting","text":"<p>Using the BroadcastValue pattern, you can apply formatting to individual cells:</p> <pre><code># Example of cell-level border control for specific cells\nfrom rtflite.attributes import BroadcastValue\n\n# Create custom border patterns\nborder_pattern = [\n    [\"single\", \"\", \"single\", \"\"],  # Row 1: borders on columns 1 and 3\n    [\"\", \"double\", \"\", \"double\"],  # Row 2: borders on columns 2 and 4\n    [\"single\", \"single\", \"single\", \"single\"],  # Row 3: borders on all columns\n]\n\ndoc = rtf.RTFDocument(\n    df=tbl.head(3),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\",\n            \"Xanomeline High Dose\",\n            \"Xanomeline Low Dose\",\n        ],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3, 2, 2, 2],\n        border_top=border_pattern,  # Apply custom border pattern\n    ),\n)\n\ndoc.write_rtf(\"intro-ae11.rtf\")\n</code></pre> <p></p> <p></p> <p>Multi-page considerations</p> <p>For large tables spanning multiple pages, rtflite handles:</p> <ul> <li>Automatic page breaks based on <code>nrow</code> setting</li> <li>Column header repetition on each page</li> <li>Consistent border styling across page boundaries</li> <li>Proper footnote and source placement</li> </ul> <pre><code># Large table with consistent formatting across pages\ndoc = rtf.RTFDocument(\n    df=tbl.head(50),\n    rtf_page=rtf.RTFPage(\n        nrow=15,\n    ),\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Complete Adverse Events Summary\",\n            \"All Treatment Groups - Multi-page Table\",\n        ]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Adverse Events\",\n            \"Placebo\\\\line (N=86)\",\n            \"Xanomeline High Dose\\\\line (N=84)\",\n            \"Xanomeline Low Dose\\\\line (N=84)\",\n        ],\n        text_format=\"b\",\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3, 1, 1, 1],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"MedDRA version 25.0 coding applied.\",\n            \"Table includes all reported adverse events regardless of relationship to study drug.\",\n            \"Events sorted alphabetically by preferred term.\",\n        ]\n    ),\n    rtf_source=rtf.RTFSource(text=\"Dataset: ADAE | Cutoff: 01JAN2023\"),\n)\n\ndoc.write_rtf(\"intro-ae12.rtf\")\n</code></pre> <p></p> <p></p>"},{"location":"reference/convert/","title":"Convert","text":""},{"location":"reference/convert/#rtflite.convert","title":"<code>rtflite.convert</code>","text":""},{"location":"reference/convert/#rtflite.convert.LibreOfficeConverter","title":"<code>LibreOfficeConverter</code>","text":"<p>Convert RTF documents to other formats using LibreOffice.</p> <p>Convert RTF files to various formats including PDF, DOCX, HTML, and others using LibreOffice in headless mode.</p> Requirements <ul> <li>LibreOffice 7.3 or later must be installed.</li> <li>Automatically finds LibreOffice in standard installation paths.</li> <li>For custom installations, provide <code>executable_path</code> parameter.</li> </ul> Note <p>The converter runs LibreOffice in headless mode, so no GUI is required. This makes it suitable for server environments and automated workflows.</p>"},{"location":"reference/convert/#rtflite.convert.LibreOfficeConverter.__init__","title":"<code>__init__(executable_path=None)</code>","text":"<p>Initialize converter with optional executable path.</p> <p>Parameters:</p> Name Type Description Default <code>executable_path</code> <code>str | None</code> <p>Path to LibreOffice executable. If None, searches standard installation locations for each platform.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If LibreOffice executable cannot be found.</p> <code>ValueError</code> <p>If LibreOffice version is below minimum requirement.</p>"},{"location":"reference/convert/#rtflite.convert.LibreOfficeConverter.convert","title":"<code>convert(input_files, output_dir, format='pdf', overwrite=False)</code>","text":"<p>Convert RTF file(s) to specified format using LibreOffice.</p> <p>Performs the actual conversion of RTF files to the target format using LibreOffice in headless mode. Supports single file or batch conversion.</p> <p>Parameters:</p> Name Type Description Default <code>input_files</code> <code>str | Path | Sequence[str | Path]</code> <p>Path to input RTF file or list of paths. Can be string or Path object. For batch conversion, provide a list/tuple.</p> required <code>output_dir</code> <code>str | Path</code> <p>Directory where converted files will be saved. Created if it doesn't exist. Can be string or Path object.</p> required <code>format</code> <code>str</code> <p>Target format for conversion. Supported formats: - 'pdf': Portable Document Format (default) - 'docx': Microsoft Word (Office Open XML) - 'doc': Microsoft Word 97-2003 - 'html': HTML Document - 'odt': OpenDocument Text - 'txt': Plain Text</p> <code>'pdf'</code> <code>overwrite</code> <code>bool</code> <p>If True, overwrites existing files in output directory. If False, raises error if output file already exists.</p> <code>False</code> <p>Returns:</p> Type Description <code>Path | Sequence[Path]</code> <p>Path | Sequence[Path]: For single file input, returns Path to the converted file. For multiple files, returns list of Paths.</p> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>If output file exists and overwrite=False.</p> <code>RuntimeError</code> <p>If LibreOffice conversion fails.</p> <p>Examples:</p> <p>Single file conversion: <pre><code>converter = LibreOfficeConverter()\npdf_path = converter.convert(\n    \"report.rtf\",\n    output_dir=\"pdfs/\",\n    format=\"pdf\"\n)\nprint(f\"Created: {pdf_path}\")\n</code></pre></p> <p>Batch conversion with overwrite: <pre><code>rtf_files = [\"report1.rtf\", \"report2.rtf\", \"report3.rtf\"]\npdf_paths = converter.convert(\n    input_files=rtf_files,\n    output_dir=\"output/pdfs/\",\n    format=\"pdf\",\n    overwrite=True\n)\nfor path in pdf_paths:\n    print(f\"Converted: {path}\")\n</code></pre></p>"},{"location":"reference/low-level/","title":"Low-level API","text":"<p>Lower-level components and utilities for advanced users who need fine-grained control.</p>"},{"location":"reference/low-level/#configuration","title":"Configuration","text":"<p>Core configuration and constants.</p> <p>Master configuration container for RTF document generation.</p> <p>Core RTF constants for measurements, formatting, and control codes.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConfiguration.create_default","title":"<code>create_default()</code>  <code>classmethod</code>","text":"<p>Create default RTF configuration.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConfiguration.create_landscape","title":"<code>create_landscape()</code>  <code>classmethod</code>","text":"<p>Create landscape-oriented configuration.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConfiguration.create_pharmaceutical_standard","title":"<code>create_pharmaceutical_standard()</code>  <code>classmethod</code>","text":"<p>Create configuration optimized for pharmaceutical reporting.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.DEFAULT_BORDER_WIDTH","title":"<code>DEFAULT_BORDER_WIDTH = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default border width in twips.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.DEFAULT_CELL_HEIGHT","title":"<code>DEFAULT_CELL_HEIGHT = 0.15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default cell height in inches.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.DEFAULT_FONT_SIZE","title":"<code>DEFAULT_FONT_SIZE = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default font size in points.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.DEFAULT_SPACE_AFTER","title":"<code>DEFAULT_SPACE_AFTER = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default space after paragraph in points.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.DEFAULT_SPACE_BEFORE","title":"<code>DEFAULT_SPACE_BEFORE = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default space before paragraph in points.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.LINE_SPACING_FACTOR","title":"<code>LINE_SPACING_FACTOR = 240</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Factor used for line spacing calculations in RTF.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.POINTS_PER_INCH","title":"<code>POINTS_PER_INCH = 72</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of points in one inch.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.TWIPS_PER_INCH","title":"<code>TWIPS_PER_INCH = 1440</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of twips in one inch. RTF uses twips as the base unit.</p>"},{"location":"reference/low-level/#rtflite.core.RTFConstants.Control","title":"<code>Control</code>","text":"<p>RTF control word constants.</p>"},{"location":"reference/low-level/#figure-utilities","title":"Figure Utilities","text":"<p>Utilities for reading and processing figures.</p> <p>Read image files and return their binary data with format information.</p> <p>This function reads image files from disk and prepares them for embedding in RTF documents. It supports PNG, JPEG, and EMF formats.</p> <p>Parameters:</p> Name Type Description Default <code>file_paths</code> <code>str | Path | Sequence[str | Path]</code> <p>Single file path or list of file paths to image files</p> required <p>Returns:</p> Type Description <code>tuple[Sequence[bytes], Sequence[str]]</code> <p>Tuple of (figure_data, figure_formats) where: - figure_data: List of image binary data as bytes - figure_formats: List of format strings ('png', 'jpeg', 'emf')</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If any image file cannot be found</p> <code>ValueError</code> <p>If image format is not supported</p>"},{"location":"reference/page-layout/","title":"Page Layout Components","text":"<p>Components for defining page structure, headers, footers, and overall document layout.</p>"},{"location":"reference/page-layout/#rtfpage","title":"RTFPage","text":"<p>Defines page dimensions, margins, and layout settings.</p> <p>               Bases: <code>BaseModel</code></p> <p>Configure RTF page layout and pagination settings.</p> <p>The RTFPage component controls page dimensions, margins, orientation, and pagination behavior including rows per page and border styles for first/last rows across page boundaries.</p> <p>Examples:</p> <p>Basic portrait page with custom margins: <pre><code>page = RTFPage(\n    orientation=\"portrait\",\n    margin=[1.0, 1.0, 1.5, 1.0, 1.5, 1.0]  # left, right, top, bottom, header, footer\n)\n</code></pre></p> <p>Landscape layout for wide tables: <pre><code>page = RTFPage(\n    orientation=\"landscape\",\n    nrow=30,  # Fewer rows due to landscape\n    border_first=\"double\",  # Double border on first row\n    border_last=\"single\"    # Single border on last row\n)\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>nrow</code> <code>int | None</code> <p>Total number of rows per page including ALL components: - Column headers (if displayed) - Data rows - Footnotes (if present) - Source lines (if present) This is NOT just data rows - it's the complete row budget.</p> <code>border_first</code> <code>str | None</code> <p>Border style for the first row of the table. Defaults to \"double\" for emphasis.</p> <code>border_last</code> <code>str | None</code> <p>Border style for the last row of the table. Defaults to \"double\" for closure.</p> Note <p>The nrow parameter represents the total row capacity of a page, not just data rows. Plan accordingly when setting this value.</p>"},{"location":"reference/page-layout/#rtfpageheader","title":"RTFPageHeader","text":"<p>Creates headers that appear at the top of pages.</p> <p>               Bases: <code>RTFTextComponent</code></p> <p>RTF page header component for document headers.</p> <p>The RTFPageHeader appears at the top of every page, typically used for page numbering, document titles, or study identifiers. Right-aligned by default with automatic page numbering.</p> <p>Examples:</p> <p>Default page numbering: <pre><code>header = RTFPageHeader()  # Shows \"Page X of Y\"\n</code></pre></p> <p>Custom header text: <pre><code>header = RTFPageHeader(\n    text=\"Protocol ABC-123 | Confidential\",\n    text_justification=[\"c\"]  # Center align\n)\n</code></pre></p> <p>Header with page number: <pre><code>header = RTFPageHeader(\n    text=\"Study Report - Page \\\\chpgn\",  # Current page number\n    text_format=[\"b\"],  # Bold\n    text_font_size=[10]\n)\n</code></pre></p> Note <ul> <li>Default text is \"Page \\chpgn of {\\field{\\*\\fldinst NUMPAGES }}\"</li> <li>Text conversion is disabled by default to preserve RTF field codes</li> <li>Right-aligned by default</li> </ul>"},{"location":"reference/page-layout/#rtfpagefooter","title":"RTFPageFooter","text":"<p>Creates footers that appear at the bottom of pages.</p> <p>               Bases: <code>RTFTextComponent</code></p> <p>RTF page footer component for document footers.</p> <p>The RTFPageFooter appears at the bottom of every page, typically used for confidentiality notices, timestamps, or file paths. Center-aligned by default.</p> <p>Examples:</p> <p>Simple footer: <pre><code>footer = RTFPageFooter(\n    text=\"Company Confidential\"\n)\n</code></pre></p> <p>Multi-line footer: <pre><code>footer = RTFPageFooter(\n    text=[\n        \"Proprietary and Confidential\",\n        \"Do Not Distribute\"\n    ],\n    text_font_size=[8, 8]\n)\n</code></pre></p> <p>Footer with timestamp: <pre><code>footer = RTFPageFooter(\n    text=\"Generated: 2024-01-15 14:30:00 | program.py\",\n    text_justification=[\"l\"],  # Left align\n    text_font_size=[8]\n)\n</code></pre></p> Note <ul> <li>Center-aligned by default</li> <li>Text conversion is disabled by default to preserve special characters</li> <li>Appears on every page of the document</li> </ul>"},{"location":"reference/page-layout/#rtftitle","title":"RTFTitle","text":"<p>Defines document and table titles.</p> <p>               Bases: <code>RTFTextComponent</code></p> <p>RTF title component with center-aligned text and LaTeX conversion enabled.</p> <p>The RTFTitle component displays centered title text at the top of the document or table. It supports multiple title lines and LaTeX-style text conversion for mathematical symbols and formatting.</p> <p>Examples:</p> <p>Single line title: <pre><code>title = RTFTitle(text=\"Adverse Events Summary\")\n</code></pre></p> <p>Multi-line title with formatting: <pre><code>title = RTFTitle(\n    text=[\"Clinical Study Report\", \"Safety Analysis Set\"],\n    text_format=[\"b\", \"\"]  # First line bold, second normal\n)\n</code></pre></p> <p>Title with LaTeX symbols: <pre><code>title = RTFTitle(\n    text=\"Efficacy Analysis (\\\\alpha = 0.05)\"\n)\n# Renders as: Efficacy Analysis (alpha = 0.05) with Greek alpha symbol\n</code></pre></p> Note <p>Text conversion is enabled by default for titles, converting: - LaTeX symbols (e.g., \\alpha to Greek alpha, \\beta to Greek beta) - Subscripts (e.g., x_1 to x with subscript 1) - Other mathematical notation</p>"},{"location":"reference/page-layout/#rtffootnote","title":"RTFFootnote","text":"<p>Creates footnotes for tables and documents.</p> <p>               Bases: <code>RTFTableTextComponent</code></p> <p>RTF footnote component for explanatory notes and citations.</p> <p>The RTFFootnote component displays footnote text at the bottom of tables. Supports multiple footnote lines and can be rendered as a table (with borders) or plain text. Text conversion is enabled by default.</p> <p>Examples:</p> <p>Single footnote: <pre><code>footnote = RTFFootnote(\n    text=\"CI = Confidence Interval; N = Number of subjects\"\n)\n</code></pre></p> <p>Multiple footnotes: <pre><code>footnote = RTFFootnote(\n    text=[\n        \"* p-value from ANCOVA model\",\n        \"** Missing values were imputed using LOCF\",\n        \"*** Baseline is defined as last value before first dose\"\n    ]\n)\n</code></pre></p> <p>Footnote without table borders: <pre><code>footnote = RTFFootnote(\n    text=\"Data cutoff date: 2023-12-31\",\n    as_table=False  # No borders around footnote\n)\n</code></pre></p> Note <ul> <li>Multiple footnote lines are joined with \\line separator</li> <li>Text conversion is enabled by default (LaTeX symbols supported)</li> <li>Default rendering includes table borders (as_table=True)</li> </ul>"},{"location":"reference/page-layout/#rtfsource","title":"RTFSource","text":"<p>Adds source information to documents.</p> <p>               Bases: <code>RTFTableTextComponent</code></p> <p>RTF source component for data source citations.</p> <p>The RTFSource component displays source information at the very bottom of the document. Typically used for dataset names, program references, or generation timestamps. Rendered as plain text without borders by default.</p> <p>Examples:</p> <p>Simple source citation: <pre><code>source = RTFSource(\n    text=\"Source: ADAE dataset, generated 2024-01-15\"\n)\n</code></pre></p> <p>Multiple source lines: <pre><code>source = RTFSource(\n    text=[\n        \"Dataset: ADAE version 3.0\",\n        \"Program: ae_summary.py\",\n        \"Generated: 2024-01-15 14:30:00\"\n    ]\n)\n</code></pre></p> <p>Source with table borders: <pre><code>source = RTFSource(\n    text=\"Database lock: 2023-12-31\",\n    as_table=True,  # Add borders around source\n    text_justification=[[\"l\"]]  # Left align instead of center\n)\n</code></pre></p> Note <ul> <li>Center-aligned by default</li> <li>Rendered without borders by default (as_table=False)</li> <li>Text conversion is enabled by default</li> </ul>"},{"location":"reference/pagination/","title":"Pagination","text":"<p>Advanced pagination features for multi-page documents.</p>"},{"location":"reference/pagination/#rtfpagination","title":"RTFPagination","text":"<p>Main pagination controller for handling page breaks and content distribution.</p> <p>               Bases: <code>BaseModel</code></p> <p>Core pagination logic and calculations for RTF documents</p>"},{"location":"reference/pagination/#rtflite.pagination.RTFPagination.calculate_available_space","title":"<code>calculate_available_space()</code>","text":"<p>Calculate available space for content on each page</p>"},{"location":"reference/pagination/#pagebreakcalculator","title":"PageBreakCalculator","text":"<p>Calculates optimal page break positions.</p> <p>               Bases: <code>BaseModel</code></p> <p>Calculates where page breaks should occur based on content and constraints</p>"},{"location":"reference/pagination/#rtflite.pagination.PageBreakCalculator.calculate_content_rows","title":"<code>calculate_content_rows(df, col_widths, table_attrs=None, font_size=9)</code>","text":"<p>Calculate how many rows each content row will occupy when rendered</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the content</p> required <code>col_widths</code> <code>Sequence[float]</code> <p>Width of each column in inches</p> required <code>table_attrs</code> <code>TableAttributes | None</code> <p>Table attributes containing cell height and font size info</p> <code>None</code> <code>font_size</code> <code>float</code> <p>Default font size in points</p> <code>9</code> <p>Returns:</p> Type Description <code>Sequence[int]</code> <p>List of row counts for each data row</p>"},{"location":"reference/pagination/#rtflite.pagination.PageBreakCalculator.find_page_breaks","title":"<code>find_page_breaks(df, col_widths, page_by=None, new_page=False, table_attrs=None, additional_rows_per_page=0)</code>","text":"<p>Find optimal page break positions (r2rtf compatible)</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame to paginate</p> required <code>col_widths</code> <code>Sequence[float]</code> <p>Column widths in inches</p> required <code>page_by</code> <code>Sequence[str] | None</code> <p>Columns to group by for page breaks</p> <code>None</code> <code>new_page</code> <code>bool</code> <p>Whether to force new pages between groups</p> <code>False</code> <code>table_attrs</code> <code>TableAttributes | None</code> <p>Table attributes for accurate row calculation</p> <code>None</code> <code>additional_rows_per_page</code> <code>int</code> <p>Additional rows per page (headers, footnotes, sources)</p> <code>0</code> <p>Returns:</p> Type Description <code>Sequence[tuple[int, int]]</code> <p>List of (start_row, end_row) tuples for each page</p>"},{"location":"reference/pagination/#contentdistributor","title":"ContentDistributor","text":"<p>Distributes content across pages while maintaining formatting.</p> <p>               Bases: <code>BaseModel</code></p> <p>Manages content distribution across multiple pages</p>"},{"location":"reference/pagination/#rtflite.pagination.ContentDistributor.distribute_content","title":"<code>distribute_content(df, col_widths, page_by=None, new_page=False, pageby_header=True, table_attrs=None, additional_rows_per_page=0, subline_by=None)</code>","text":"<p>Distribute content across multiple pages (r2rtf compatible)</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame to distribute</p> required <code>col_widths</code> <code>Sequence[float]</code> <p>Column widths in inches</p> required <code>page_by</code> <code>Sequence[str] | None</code> <p>Columns to group by</p> <code>None</code> <code>new_page</code> <code>bool</code> <p>Force new pages between groups</p> <code>False</code> <code>pageby_header</code> <code>bool</code> <p>Repeat headers on new pages</p> <code>True</code> <code>table_attrs</code> <code>TableAttributes | None</code> <p>Table attributes for accurate calculations</p> <code>None</code> <code>additional_rows_per_page</code> <code>int</code> <p>Additional rows per page (headers, footnotes, sources)</p> <code>0</code> <code>subline_by</code> <code>Sequence[str] | None</code> <p>Columns to create subline headers by (forces new_page=True)</p> <code>None</code> <p>Returns:</p> Type Description <code>Sequence[Mapping[str, Any]]</code> <p>List of page information dictionaries</p>"},{"location":"reference/pagination/#rtflite.pagination.ContentDistributor.get_group_headers","title":"<code>get_group_headers(df, page_by, start_row)</code>","text":"<p>Get group header information for a page</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Original DataFrame</p> required <code>page_by</code> <code>Sequence[str]</code> <p>Grouping columns</p> required <code>start_row</code> <code>int</code> <p>Starting row for this page</p> required <p>Returns:</p> Type Description <code>Mapping[str, Any]</code> <p>Dictionary with group header information</p>"},{"location":"reference/rtf-document/","title":"RTFDocument","text":"<p>The <code>RTFDocument</code> class is the main entry point for creating RTF documents with rtflite. It orchestrates all components to generate properly formatted RTF output.</p> <p>               Bases: <code>BaseModel</code></p> <p>Main class for creating RTF documents with tables, text, and figures.</p> <p>RTFDocument is the central class for generating Rich Text Format (RTF) files containing formatted tables, titles, footnotes, and other document elements. It provides a comprehensive API for creating professional documents commonly used in clinical trials, scientific research, and data reporting.</p> <p>Examples:</p> <p>Simple table with title: <pre><code>import rtflite as rtf\nimport polars as pl\n\ndf = pl.DataFrame({\n    \"Subject\": [\"001\", \"002\", \"003\"],\n    \"Age\": [45, 52, 38],\n    \"Treatment\": [\"Drug A\", \"Drug B\", \"Placebo\"]\n})\n\ndoc = rtf.RTFDocument(\n    df=df,\n    rtf_title=rtf.RTFTitle(text=\"Patient Demographics\"),\n    rtf_body=rtf.RTFBody(col_rel_width=[2, 1, 2])\n)\ndoc.write_rtf(\"demographics.rtf\")\n</code></pre></p> <p>Multi-page document with headers and footers: <pre><code>doc = rtf.RTFDocument(\n    df=large_df,\n    rtf_page=rtf.RTFPage(nrow=40, orientation=\"landscape\"),\n    rtf_page_header=rtf.RTFPageHeader(),  # Default page numbering\n    rtf_page_footer=rtf.RTFPageFooter(text=\"Confidential\"),\n    rtf_title=rtf.RTFTitle(text=\"Clinical Study Results\"),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"Subject ID\", \"Visit\", \"Result\", \"Units\"]\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[2, 1, 1, 1],\n        text_justification=[[\"l\", \"c\", \"r\", \"c\"]]\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=\"Results are mean +/- SD\"\n    )\n)\ndoc.write_rtf(\"results.rtf\")\n</code></pre></p> <p>Document with grouped data and sublines: <pre><code>doc = rtf.RTFDocument(\n    df=grouped_df,\n    rtf_body=rtf.RTFBody(\n        group_by=[\"SITE\", \"TREATMENT\"],  # Suppress duplicate values\n        subline_by=[\"STUDY_PHASE\"],      # Create section headers\n        col_rel_width=[2, 2, 1, 1]\n    )\n)\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>df</code> <code>DataFrame | list[DataFrame] | None</code> <p>Data to display in the table. Can be a single DataFrame or list of DataFrames for multi-section documents. Accepts pandas or polars DataFrames (automatically converted to polars internally).</p> <code>rtf_page</code> <code>RTFPage</code> <p>Page configuration including size, orientation, margins, and pagination settings.</p> <code>rtf_page_header</code> <code>RTFPageHeader | None</code> <p>Optional header appearing at the top of every page.</p> <code>rtf_page_footer</code> <code>RTFPageFooter | None</code> <p>Optional footer appearing at the bottom of every page.</p> <code>rtf_title</code> <code>RTFTitle | None</code> <p>Document title(s) displayed at the top.</p> <code>rtf_column_header</code> <code>Sequence[RTFColumnHeader] | Sequence[Sequence[RTFColumnHeader | None]]</code> <p>Column headers for the table. Can be a single header or list of headers for multi-row headers.</p> <code>rtf_body</code> <code>RTFBody | Sequence[RTFBody] | None</code> <p>Table body configuration including column widths, formatting, borders, and special features like group_by and subline_by.</p> <code>rtf_footnote</code> <code>RTFFootnote | None</code> <p>Optional footnote text displayed after the table.</p> <code>rtf_source</code> <code>RTFSource | None</code> <p>Optional source citation displayed at the very bottom.</p> <code>rtf_figure</code> <code>RTFFigure | None</code> <p>Optional figure/image to embed in the document.</p> <p>Methods:</p> Name Description <code>rtf_encode</code> <p>Generate the complete RTF document as a string.</p> <code>write_rtf</code> <p>Write the RTF document to a file.</p>"},{"location":"reference/rtf-document/#rtflite.encode.RTFDocument.convert_column_header_to_list","title":"<code>convert_column_header_to_list(v)</code>","text":"<p>Convert single RTFColumnHeader to list or handle nested list format</p>"},{"location":"reference/rtf-document/#rtflite.encode.RTFDocument.rtf_encode","title":"<code>rtf_encode()</code>","text":"<p>Generate the complete RTF document as a string.</p> <p>This method processes all document components and generates the final RTF code including headers, formatting, tables, and all other elements. The resulting string can be written to a file or processed further.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Complete RTF document string ready to be saved as an .rtf file.</p> <p>Examples:</p> <pre><code>doc = RTFDocument(df=data, rtf_title=RTFTitle(text=\"Report\"))\nrtf_string = doc.rtf_encode()\n# Can write manually or process further\nwith open(\"output.rtf\", \"w\") as f:\n    f.write(rtf_string)\n</code></pre>"},{"location":"reference/rtf-document/#rtflite.encode.RTFDocument.validate_column_names","title":"<code>validate_column_names()</code>","text":"<p>Validate that column references exist in DataFrame and multi-section consistency.</p>"},{"location":"reference/rtf-document/#rtflite.encode.RTFDocument.validate_dataframe","title":"<code>validate_dataframe(values)</code>  <code>classmethod</code>","text":"<p>Convert DataFrame(s) to polars for internal processing.</p>"},{"location":"reference/rtf-document/#rtflite.encode.RTFDocument.write_rtf","title":"<code>write_rtf(file_path)</code>","text":"<p>Write the RTF document to a file.</p> <p>Generates the complete RTF document and writes it to the specified file path. The file is written in UTF-8 encoding and will have the .rtf extension.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path where the RTF file should be saved. Can be absolute or relative path. Directory must exist.</p> required <p>Examples:</p> <pre><code>doc = RTFDocument(df=data, rtf_title=RTFTitle(text=\"Report\"))\ndoc.write_rtf(\"output/report.rtf\")\n</code></pre> Note <p>The method prints the file path to stdout for confirmation. Ensure the directory exists before calling this method.</p>"},{"location":"reference/strwidth/","title":"String width","text":""},{"location":"reference/strwidth/#rtflite.strwidth","title":"<code>rtflite.strwidth</code>","text":""},{"location":"reference/strwidth/#rtflite.strwidth.get_string_width","title":"<code>get_string_width(text, font='Times New Roman', font_size=12, unit='in', dpi=72.0)</code>","text":"<p>Calculate the width of a string for a given font and size. Uses metric-compatible fonts that match the metrics of common proprietary fonts.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The string to measure.</p> required <code>font</code> <code>FontName | FontNumber</code> <p>RTF font name or RTF font number (1-10).</p> <code>'Times New Roman'</code> <code>font_size</code> <code>float</code> <p>Font size in points.</p> <code>12</code> <code>unit</code> <code>Unit</code> <p>Unit to return the width in.</p> <code>'in'</code> <code>dpi</code> <code>float</code> <p>Dots per inch for unit conversion.</p> <code>72.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Width of the string in the specified unit.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an unsupported font name/number or unit is provided.</p>"},{"location":"reference/tables/","title":"Table Components","text":"<p>Components for creating and formatting tables in RTF documents.</p>"},{"location":"reference/tables/#rtfbody","title":"RTFBody","text":"<p>Defines the main table body with data and formatting options.</p> <p>               Bases: <code>TableAttributes</code></p> <p>Configure table body formatting and layout.</p> <p>The RTFBody component controls how data is displayed in the RTF table, including column widths, text formatting, borders, and advanced features like group_by for value suppression and subline_by for section headers.</p> <p>Examples:</p> <p>Basic table with custom column widths: <pre><code>body = RTFBody(\n    col_rel_width=[3, 2, 2, 2],\n    text_justification=[[\"l\", \"c\", \"c\", \"c\"]]\n)\n</code></pre></p> <p>Using group_by to suppress duplicate values: <pre><code>body = RTFBody(\n    group_by=[\"SITE\", \"SUBJECT\"],\n    col_rel_width=[2, 2, 3, 1]\n)\n</code></pre></p> <p>Using subline_by for section headers: <pre><code>body = RTFBody(\n    subline_by=[\"SITE\", \"STUDY\"],  # Creates paragraph headers\n    col_rel_width=[3, 2, 2]  # Note: subline_by columns are removed from table\n)\n</code></pre></p> Note <p>When using subline_by: - The specified columns are removed from the table display - Values appear as paragraph headers before each section - Pagination is automatically enabled (new_page=True) - Formatting attributes apply uniformly to the entire table</p>"},{"location":"reference/tables/#rtfcolumnheader","title":"RTFColumnHeader","text":"<p>Creates column headers for tables.</p> <p>               Bases: <code>TableAttributes</code></p> <p>Configure column headers for RTF tables.</p> <p>The RTFColumnHeader component defines column headers that appear at the top of tables and repeat on each page in multi-page documents. Supports multi-row headers and flexible column spanning.</p> <p>Examples:</p> <p>Simple column headers: <pre><code>header = RTFColumnHeader(\n    text=[\"Name\", \"Age\", \"Treatment\", \"Response\"]\n)\n</code></pre></p> <p>Headers with custom formatting: <pre><code>header = RTFColumnHeader(\n    text=[\"Subject\", \"Baseline\", \"Week 4\", \"Week 8\"],\n    text_format=[\"b\", \"b\", \"b\", \"b\"],  # All bold\n    text_justification=[\"l\", \"c\", \"c\", \"c\"],  # Left, center, center, center\n    border_bottom=[\"double\", \"double\", \"double\", \"double\"]\n)\n</code></pre></p> <p>Multi-row headers with col_rel_width: <pre><code># First row spans multiple columns\nheader1 = RTFColumnHeader(\n    text=[\"Patient Info\", \"Treatment Results\"],\n    col_rel_width=[2, 3]  # Spans 2 and 3 columns respectively\n)\n# Second row with individual columns\nheader2 = RTFColumnHeader(\n    text=[\"ID\", \"Age\", \"Drug A\", \"Drug B\", \"Placebo\"],\n    col_rel_width=[1, 1, 1, 1, 1]\n)\n</code></pre></p> Note <ul> <li>Headers automatically repeat on each page in multi-page documents</li> <li>Use col_rel_width to create spanning headers</li> <li>Border styles from RTFPage are applied to the first row</li> </ul>"},{"location":"reference/tables/#rtffigure","title":"RTFFigure","text":"<p>Embeds figures and images in RTF documents.</p> <p>               Bases: <code>BaseModel</code></p> <p>RTF Figure component for embedding images in RTF documents.</p> <p>This class handles figure embedding with support for multiple images, custom sizing, and proper RTF encoding.</p>"},{"location":"reference/tables/#rtflite.input.RTFFigure.convert_dimensions","title":"<code>convert_dimensions(v)</code>","text":"<p>Convert single value to list if needed.</p>"},{"location":"reference/tables/#rtflite.input.RTFFigure.validate_alignment","title":"<code>validate_alignment(v)</code>","text":"<p>Validate figure alignment value.</p>"},{"location":"reference/tables/#rtflite.input.RTFFigure.validate_figure_data","title":"<code>validate_figure_data()</code>","text":"<p>Validate figure paths and convert to list format.</p>"},{"location":"reference/tables/#rtflite.input.RTFFigure.validate_position","title":"<code>validate_position(v)</code>","text":"<p>Validate figure position value.</p>"},{"location":"reference/tables/#row-components","title":"Row Components","text":"<p>Lower-level components for row construction.</p>"},{"location":"reference/tables/#row","title":"Row","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a row in an RTF table.</p>"},{"location":"reference/tables/#cell","title":"Cell","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a cell in an RTF table.</p>"},{"location":"reference/tables/#border","title":"Border","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single border's style, color, and width.</p>"},{"location":"reference/text-formatting/","title":"Text &amp; Formatting","text":"<p>Components and utilities for text styling and formatting in RTF documents.</p>"},{"location":"reference/text-formatting/#text-attributes","title":"Text Attributes","text":"<p>Base attributes for text formatting.</p> <p>               Bases: <code>BaseModel</code></p> <p>Base class for text-related attributes in RTF components</p>"},{"location":"reference/text-formatting/#rtflite.attributes.TextAttributes.calculate_lines","title":"<code>calculate_lines(text, available_width, row_idx=0, col_idx=0)</code>","text":"<p>Calculate number of lines needed for text given available width.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content to measure</p> required <code>available_width</code> <code>float</code> <p>Available width in inches</p> required <code>row_idx</code> <code>int</code> <p>Row index for attribute lookup (default: 0)</p> <code>0</code> <code>col_idx</code> <code>int</code> <p>Column index for attribute lookup (default: 0)</p> <code>0</code> <p>Returns:</p> Type Description <code>int</code> <p>Number of lines needed (minimum 1)</p>"},{"location":"reference/text-formatting/#rtflite.attributes.TextAttributes.convert_to_list","title":"<code>convert_to_list(v)</code>","text":"<p>Convert single values to lists before validation.</p>"},{"location":"reference/text-formatting/#table-attributes","title":"Table Attributes","text":"<p>Attributes specific to table formatting.</p> <p>               Bases: <code>TextAttributes</code></p> <p>Base class for table-related attributes in RTF components</p>"},{"location":"reference/text-formatting/#rtflite.attributes.TableAttributes.validate_border","title":"<code>validate_border(v)</code>","text":"<p>Validate that all border styles are valid.</p>"},{"location":"reference/text-formatting/#text-content","title":"Text Content","text":"<p>Component for handling text content in cells.</p> <p>               Bases: <code>BaseModel</code></p> <p>Represents RTF text with formatting.</p>"},{"location":"reference/text-formatting/#broadcast-value","title":"Broadcast Value","text":"<p>Utility for broadcasting values across rows and columns.</p> <p>               Bases: <code>BaseModel</code></p>"}]}